# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swisssign_ra_api.v2.models.certificate_order_status import CertificateOrderStatus
from swisssign_ra_api.v2.models.revocation_reason import RevocationReason
from typing import Optional, Set
from typing_extensions import Self

class SearchCertificateOrder(BaseModel):
    """
    SearchCertificateOrder
    """ # noqa: E501
    order_reference: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Certificate Order reference", alias="orderReference")
    serial_number: Optional[StrictStr] = Field(default=None, description="Certificate serial number (Big Integer HEX encoded) with optional wildcard attributes ? and/or *", alias="serialNumber")
    order_status: Optional[List[CertificateOrderStatus]] = Field(default=None, alias="orderStatus")
    revocation_reason: Optional[List[RevocationReason]] = Field(default=None, alias="revocationReason")
    client_references: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Client reference UUID", alias="clientReferences")
    start_after: Optional[datetime] = Field(default=None, description="Certificate Order not starting after Date", alias="startAfter")
    start_before: Optional[datetime] = Field(default=None, description="Certificate Order not starting before Date", alias="startBefore")
    attribute: Optional[StrictStr] = Field(default=None, description="Any certificate attribute OID or value with optional wildcard attributes ? and/or *")
    include_certificate_chain: Optional[StrictBool] = Field(default=None, description="Include the certificate chain in the certificate order when available", alias="includeCertificateChain")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Customer label/tags")
    __properties: ClassVar[List[str]] = ["orderReference", "serialNumber", "orderStatus", "revocationReason", "clientReferences", "startAfter", "startBefore", "attribute", "includeCertificateChain", "tags"]

    @field_validator('order_reference')
    def order_reference_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"ord-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /ord-[0-9a-f-]{36}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchCertificateOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchCertificateOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderReference": obj.get("orderReference"),
            "serialNumber": obj.get("serialNumber"),
            "orderStatus": obj.get("orderStatus"),
            "revocationReason": obj.get("revocationReason"),
            "clientReferences": obj.get("clientReferences"),
            "startAfter": obj.get("startAfter"),
            "startBefore": obj.get("startBefore"),
            "attribute": obj.get("attribute"),
            "includeCertificateChain": obj.get("includeCertificateChain"),
            "tags": obj.get("tags")
        })
        return _obj


