# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swisssign_ra_api.v2.models.client_domain_validation_status import ClientDomainValidationStatus
from typing import Optional, Set
from typing_extensions import Self

class ClientDNS(BaseModel):
    """
    ClientDNS
    """ # noqa: E501
    uuid: Annotated[str, Field(strict=True)] = Field(description="Pre validated client domain reference")
    domain: StrictStr = Field(description="Client domain in punycode")
    domain_unicode: StrictStr = Field(description="Client domain in unicode", alias="domainUnicode")
    validated: StrictBool = Field(description="Indicates if the domain is validated")
    trusted_domain: StrictBool = Field(description="Indicates if the domain is a trusted domain (for private PKIs). This setting is linked to the certificate product DNS validation rule for Private PKIs.", alias="trustedDomain")
    time_validated: Optional[datetime] = Field(default=None, description="Indicates when the domain got validated", alias="timeValidated")
    validation_method: StrictStr = Field(description="DNS validation type", alias="validationMethod")
    random_value: Optional[StrictStr] = Field(default=None, description="The random value to add to the DNS TXT record for the domain", alias="randomValue")
    random_value_time_created: Optional[datetime] = Field(default=None, description="Indicates when the random value was created", alias="randomValueTimeCreated")
    random_value_time_expire: Optional[datetime] = Field(default=None, description="Indicates when the random value expires", alias="randomValueTimeExpire")
    validation_result: Optional[StrictStr] = Field(default=None, description="Indicates the validation result", alias="validationResult")
    time_expired: Optional[datetime] = Field(default=None, description="Indicates when the random value was created", alias="timeExpired")
    expired: StrictBool = Field(description="Indicates if the pre validation of the domain has expired")
    random_value_time_expired: StrictBool = Field(description="Indicates if the random value is expired", alias="randomValueTimeExpired")
    status: Optional[ClientDomainValidationStatus] = None
    __properties: ClassVar[List[str]] = ["uuid", "domain", "domainUnicode", "validated", "trustedDomain", "timeValidated", "validationMethod", "randomValue", "randomValueTimeCreated", "randomValueTimeExpire", "validationResult", "timeExpired", "expired", "randomValueTimeExpired", "status"]

    @field_validator('uuid')
    def uuid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"cld-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /cld-[0-9a-f-]{36}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientDNS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uuid",
            "domain_unicode",
            "validated",
            "time_validated",
            "validation_method",
            "random_value",
            "random_value_time_created",
            "random_value_time_expire",
            "validation_result",
            "time_expired",
            "expired",
            "random_value_time_expired",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientDNS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "domain": obj.get("domain"),
            "domainUnicode": obj.get("domainUnicode"),
            "validated": obj.get("validated"),
            "trustedDomain": obj.get("trustedDomain"),
            "timeValidated": obj.get("timeValidated"),
            "validationMethod": obj.get("validationMethod"),
            "randomValue": obj.get("randomValue"),
            "randomValueTimeCreated": obj.get("randomValueTimeCreated"),
            "randomValueTimeExpire": obj.get("randomValueTimeExpire"),
            "validationResult": obj.get("validationResult"),
            "timeExpired": obj.get("timeExpired"),
            "expired": obj.get("expired"),
            "randomValueTimeExpired": obj.get("randomValueTimeExpired"),
            "status": obj.get("status")
        })
        return _obj


