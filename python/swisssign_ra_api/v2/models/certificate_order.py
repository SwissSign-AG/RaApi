# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swisssign_ra_api.v2.models.additional_recipient import AdditionalRecipient
from swisssign_ra_api.v2.models.certificate import Certificate
from swisssign_ra_api.v2.models.certificate_order_status import CertificateOrderStatus
from typing import Optional, Set
from typing_extensions import Self

class CertificateOrder(BaseModel):
    """
    CertificateOrder
    """ # noqa: E501
    uuid: Annotated[str, Field(strict=True)] = Field(description="Certificate Order reference")
    created_on: datetime = Field(description="Certificate Order creation date time", alias="createdOn")
    status: CertificateOrderStatus
    client_reference: Annotated[str, Field(strict=True)] = Field(description="Client reference UUID", alias="clientReference")
    product_reference: Annotated[str, Field(strict=True)] = Field(description="Product reference UUID", alias="productReference")
    certificate: Optional[Certificate] = None
    certificate_chain: Optional[List[StrictStr]] = Field(default=None, description="Certificate chain", alias="certificateChain")
    tags: Optional[List[StrictStr]] = Field(default=None, description="User defined tags/labels")
    additional_recipients: Optional[List[AdditionalRecipient]] = Field(default=None, alias="additionalRecipients")
    issued_by: Optional[StrictStr] = Field(default=None, description="email of the person who created the order", alias="issuedBy")
    __properties: ClassVar[List[str]] = ["uuid", "createdOn", "status", "clientReference", "productReference", "certificate", "certificateChain", "tags", "additionalRecipients", "issuedBy"]

    @field_validator('uuid')
    def uuid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"ord-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /ord-[0-9a-f-]{36}/")
        return value

    @field_validator('client_reference')
    def client_reference_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"cli-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /cli-[0-9a-f-]{36}/")
        return value

    @field_validator('product_reference')
    def product_reference_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"pma-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /pma-[0-9a-f-]{36}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "client_reference",
            "product_reference",
            "issued_by",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate
        if self.certificate:
            _dict['certificate'] = self.certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_recipients (list)
        _items = []
        if self.additional_recipients:
            for _item_additional_recipients in self.additional_recipients:
                if _item_additional_recipients:
                    _items.append(_item_additional_recipients.to_dict())
            _dict['additionalRecipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "createdOn": obj.get("createdOn"),
            "status": obj.get("status"),
            "clientReference": obj.get("clientReference"),
            "productReference": obj.get("productReference"),
            "certificate": Certificate.from_dict(obj["certificate"]) if obj.get("certificate") is not None else None,
            "certificateChain": obj.get("certificateChain"),
            "tags": obj.get("tags"),
            "additionalRecipients": [AdditionalRecipient.from_dict(_item) for _item in obj["additionalRecipients"]] if obj.get("additionalRecipients") is not None else None,
            "issuedBy": obj.get("issuedBy")
        })
        return _obj


