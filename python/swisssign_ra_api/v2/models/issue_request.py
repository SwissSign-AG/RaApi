# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from swisssign_ra_api.v2.models.additional_recipient import AdditionalRecipient
from swisssign_ra_api.v2.models.registration_document import RegistrationDocument
from swisssign_ra_api.v2.models.request_overrides import RequestOverrides
from typing import Optional, Set
from typing_extensions import Self

class IssueRequest(BaseModel):
    """
    IssueRequest
    """ # noqa: E501
    product_reference: Annotated[str, Field(strict=True)] = Field(description="Product reference", alias="productReference")
    csr: Optional[StrictStr] = Field(default=None, description="CSR PEM encoded with or without ----BEGIN/END CERTIFICATE REQUEST-----. When null, a key-pair is generated if the certificate policy allows it (SubjectDN and optional overrides must be provided where necessary).")
    overrides: Optional[RequestOverrides] = None
    additional_recipients: Optional[List[AdditionalRecipient]] = Field(default=None, alias="additionalRecipients")
    registration_documents: Optional[List[RegistrationDocument]] = Field(default=None, alias="registrationDocuments")
    tags: Optional[List[StrictStr]] = None
    note: Optional[StrictStr] = Field(default=None, description="User note added to issued certificate order")
    publish_certificate: Optional[StrictBool] = Field(default=None, description="Publish certificate to repository. Publication occurs if option is enabled on certificate policy or if the account has the option enabled to override the publication. ", alias="publishCertificate")
    synchrone: Optional[StrictBool] = Field(default=False, description="Request is sent asynchronously to the backend by default.  Setting this value to _true_ will wait until the certificate is issued and return the completed certificate order. For successful synchronous issuance, _insure_ that you have all prerequisites for DNS validation and/or Authorization fulfilled. ")
    accept_tand_c: Optional[StrictBool] = Field(default=True, description="When server backend has T&C enabled, this value is checked. ", alias="acceptTandC")
    include_certificate_chain: Optional[StrictBool] = Field(default=False, description="Include the certificate chain in the reply (only valid when 'synchronous' is true). ", alias="includeCertificateChain")
    __properties: ClassVar[List[str]] = ["productReference", "csr", "overrides", "additionalRecipients", "registrationDocuments", "tags", "note", "publishCertificate", "synchrone", "acceptTandC", "includeCertificateChain"]

    @field_validator('product_reference')
    def product_reference_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"pma-[0-9a-f-]{36}", value):
            raise ValueError(r"must validate the regular expression /pma-[0-9a-f-]{36}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of overrides
        if self.overrides:
            _dict['overrides'] = self.overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_recipients (list)
        _items = []
        if self.additional_recipients:
            for _item_additional_recipients in self.additional_recipients:
                if _item_additional_recipients:
                    _items.append(_item_additional_recipients.to_dict())
            _dict['additionalRecipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in registration_documents (list)
        _items = []
        if self.registration_documents:
            for _item_registration_documents in self.registration_documents:
                if _item_registration_documents:
                    _items.append(_item_registration_documents.to_dict())
            _dict['registrationDocuments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productReference": obj.get("productReference"),
            "csr": obj.get("csr"),
            "overrides": RequestOverrides.from_dict(obj["overrides"]) if obj.get("overrides") is not None else None,
            "additionalRecipients": [AdditionalRecipient.from_dict(_item) for _item in obj["additionalRecipients"]] if obj.get("additionalRecipients") is not None else None,
            "registrationDocuments": [RegistrationDocument.from_dict(_item) for _item in obj["registrationDocuments"]] if obj.get("registrationDocuments") is not None else None,
            "tags": obj.get("tags"),
            "note": obj.get("note"),
            "publishCertificate": obj.get("publishCertificate"),
            "synchrone": obj.get("synchrone") if obj.get("synchrone") is not None else False,
            "acceptTandC": obj.get("acceptTandC") if obj.get("acceptTandC") is not None else True,
            "includeCertificateChain": obj.get("includeCertificateChain") if obj.get("includeCertificateChain") is not None else False
        })
        return _obj


