# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class AdditionalRecipient(BaseModel):
    """
    AdditionalRecipient
    """ # noqa: E501
    email: StrictStr = Field(description="RFC822 email")
    recipient_type: StrictStr = Field(description="Notification type for additional recipient.   - DNS_OWNER_CHECK_EMAIL_LINK: send notification for DNS validation (email link) to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - DNS_CAB: send notification for CAB DNS change or CAB Agreed upon to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - ISSUANCE: send notification for certificate issuance to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - REVOCATION: send notification for certificate revocation to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - RENEWAL: send notification for certificate renewal to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - RECOVERY: send notification for key recovery to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - AUTHORIZATION: send notification for authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - AUTHORIZATION_ACCEPTED: send notification for accepted authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.   - AUTHORIZATION_REJECTED: send notification for issuance authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template. ", alias="recipientType")
    language: StrictStr = Field(description="Notification language for additional recipient. The NEUTRAL type is the default notification is no notification with type of DE, FR or EN is defined. This is usually a notification which contains a message in three languages. ")
    __properties: ClassVar[List[str]] = ["email", "recipientType", "language"]

    @field_validator('recipient_type')
    def recipient_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DNS_OWNER_CHECK_EMAIL_LINK', 'DNS_CAB', 'ISSUANCE', 'REVOCATION', 'RENEWAL', 'RECOVERY', 'AUTHORIZATION', 'AUTHORIZATION_ACCEPTED', 'AUTHORIZATION_REJECTED']):
            raise ValueError("must be one of enum values ('DNS_OWNER_CHECK_EMAIL_LINK', 'DNS_CAB', 'ISSUANCE', 'REVOCATION', 'RENEWAL', 'RECOVERY', 'AUTHORIZATION', 'AUTHORIZATION_ACCEPTED', 'AUTHORIZATION_REJECTED')")
        return value

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NEUTRAL', 'EN', 'FR', 'DE']):
            raise ValueError("must be one of enum values ('NEUTRAL', 'EN', 'FR', 'DE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalRecipient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalRecipient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "recipientType": obj.get("recipientType"),
            "language": obj.get("language")
        })
        return _obj


