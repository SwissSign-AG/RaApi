# coding: utf-8

"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md

    The version of the OpenAPI document: 3.4.4
    Contact: ssc@swisssign.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swisssign_ra_api.v2.models.request_device_serial_number import RequestDeviceSerialNumber
from swisssign_ra_api.v2.models.request_dns import RequestDNS
from swisssign_ra_api.v2.models.request_ip import RequestIP
from swisssign_ra_api.v2.models.request_rfc822 import RequestRFC822
from swisssign_ra_api.v2.models.request_role import RequestRole
from swisssign_ra_api.v2.models.request_scope import RequestScope
from swisssign_ra_api.v2.models.request_upn import RequestUPN
from typing import Optional, Set
from typing_extensions import Self

class RequestExtensions(BaseModel):
    """
    RequestExtensions
    """ # noqa: E501
    microsoft_security_identifier: Optional[StrictStr] = Field(default=None, description="Microsoft Security Identifier (SID) Override or add the X.509 extension is present in the certificate policy ", alias="microsoftSecurityIdentifier")
    microsoft_policy_template_oid: Optional[StrictStr] = Field(default=None, description="Microsoft Policy Template Object Identifier. Override or add the X.509 extension is present in the certificate policy ", alias="microsoftPolicyTemplateOID")
    request_dns: Optional[RequestDNS] = Field(default=None, alias="requestDNS")
    request_rfc822: Optional[RequestRFC822] = Field(default=None, alias="requestRFC822")
    request_upn: Optional[RequestUPN] = Field(default=None, alias="requestUPN")
    request_ip: Optional[RequestIP] = Field(default=None, alias="requestIP")
    request_role: Optional[RequestRole] = Field(default=None, alias="requestRole")
    request_device_serial_number: Optional[RequestDeviceSerialNumber] = Field(default=None, alias="requestDeviceSerialNumber")
    request_scope: Optional[RequestScope] = Field(default=None, alias="requestScope")
    __properties: ClassVar[List[str]] = ["microsoftSecurityIdentifier", "microsoftPolicyTemplateOID", "requestDNS", "requestRFC822", "requestUPN", "requestIP", "requestRole", "requestDeviceSerialNumber", "requestScope"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestExtensions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_dns
        if self.request_dns:
            _dict['requestDNS'] = self.request_dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_rfc822
        if self.request_rfc822:
            _dict['requestRFC822'] = self.request_rfc822.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_upn
        if self.request_upn:
            _dict['requestUPN'] = self.request_upn.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_ip
        if self.request_ip:
            _dict['requestIP'] = self.request_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_role
        if self.request_role:
            _dict['requestRole'] = self.request_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_device_serial_number
        if self.request_device_serial_number:
            _dict['requestDeviceSerialNumber'] = self.request_device_serial_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_scope
        if self.request_scope:
            _dict['requestScope'] = self.request_scope.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestExtensions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "microsoftSecurityIdentifier": obj.get("microsoftSecurityIdentifier"),
            "microsoftPolicyTemplateOID": obj.get("microsoftPolicyTemplateOID"),
            "requestDNS": RequestDNS.from_dict(obj["requestDNS"]) if obj.get("requestDNS") is not None else None,
            "requestRFC822": RequestRFC822.from_dict(obj["requestRFC822"]) if obj.get("requestRFC822") is not None else None,
            "requestUPN": RequestUPN.from_dict(obj["requestUPN"]) if obj.get("requestUPN") is not None else None,
            "requestIP": RequestIP.from_dict(obj["requestIP"]) if obj.get("requestIP") is not None else None,
            "requestRole": RequestRole.from_dict(obj["requestRole"]) if obj.get("requestRole") is not None else None,
            "requestDeviceSerialNumber": RequestDeviceSerialNumber.from_dict(obj["requestDeviceSerialNumber"]) if obj.get("requestDeviceSerialNumber") is not None else None,
            "requestScope": RequestScope.from_dict(obj["requestScope"]) if obj.get("requestScope") is not None else None
        })
        return _obj


