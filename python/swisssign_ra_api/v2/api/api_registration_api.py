"""
    SwissSign RA REST API

    See https://github.com/SwissSign-AG/RaApi/README.md  # noqa: E501

    The version of the OpenAPI document: 2.0.209
    Contact: opensource@swisssign.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from swisssign_ra_api.v2.api_client import ApiClient, Endpoint as _Endpoint
from swisssign_ra_api.v2.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from swisssign_ra_api.v2.model.api_error import APIError
from swisssign_ra_api.v2.model.certificate_order import CertificateOrder
from swisssign_ra_api.v2.model.certificate_order_status import CertificateOrderStatus
from swisssign_ra_api.v2.model.certificate_order_task import CertificateOrderTask
from swisssign_ra_api.v2.model.client import Client
from swisssign_ra_api.v2.model.client_dns import ClientDNS
from swisssign_ra_api.v2.model.revocation_request import RevocationRequest
from swisssign_ra_api.v2.model.search_certificate_order import SearchCertificateOrder


class ApiRegistrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_client_prevalidated_domains_endpoint = _Endpoint(
            settings={
                'response_type': ([ClientDNS],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{clientReference}/register',
                'operation_id': 'create_client_prevalidated_domains',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_reference',
                    'request_body',
                ],
                'required': [
                    'client_reference',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_reference',
                ]
            },
            root_map={
                'validations': {
                    ('client_reference',): {

                        'regex': {
                            'pattern': r'cli-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_reference':
                        (str,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'client_reference': 'clientReference',
                },
                'location_map': {
                    'client_reference': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_client_prevalidated_domain_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{prevalidatedDomainReference}/delete',
                'operation_id': 'delete_client_prevalidated_domain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'prevalidated_domain_reference',
                ],
                'required': [
                    'prevalidated_domain_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'prevalidated_domain_reference',
                ]
            },
            root_map={
                'validations': {
                    ('prevalidated_domain_reference',): {

                        'regex': {
                            'pattern': r'cld-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'prevalidated_domain_reference':
                        (str,),
                },
                'attribute_map': {
                    'prevalidated_domain_reference': 'prevalidatedDomainReference',
                },
                'location_map': {
                    'prevalidated_domain_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_client_prevalidated_domain_token_endpoint = _Endpoint(
            settings={
                'response_type': (ClientDNS,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{prevalidatedDomainReference}/token/delete',
                'operation_id': 'delete_client_prevalidated_domain_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'prevalidated_domain_reference',
                ],
                'required': [
                    'prevalidated_domain_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'prevalidated_domain_reference',
                ]
            },
            root_map={
                'validations': {
                    ('prevalidated_domain_reference',): {

                        'regex': {
                            'pattern': r'cld-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'prevalidated_domain_reference':
                        (str,),
                },
                'attribute_map': {
                    'prevalidated_domain_reference': 'prevalidatedDomainReference',
                },
                'location_map': {
                    'prevalidated_domain_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certificate_chain_endpoint = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/order/{orderReference}/certificate/chain',
                'operation_id': 'get_certificate_chain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_reference',
                ],
                'required': [
                    'order_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'order_reference',
                ]
            },
            root_map={
                'validations': {
                    ('order_reference',): {

                        'regex': {
                            'pattern': r'ord-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_reference':
                        (str,),
                },
                'attribute_map': {
                    'order_reference': 'orderReference',
                },
                'location_map': {
                    'order_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certificate_order_endpoint = _Endpoint(
            settings={
                'response_type': (CertificateOrder,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/order/{orderReference}',
                'operation_id': 'get_certificate_order',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_reference',
                ],
                'required': [
                    'order_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'order_reference',
                ]
            },
            root_map={
                'validations': {
                    ('order_reference',): {

                        'regex': {
                            'pattern': r'ord-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_reference':
                        (str,),
                },
                'attribute_map': {
                    'order_reference': 'orderReference',
                },
                'location_map': {
                    'order_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certificate_order_status_endpoint = _Endpoint(
            settings={
                'response_type': (CertificateOrderStatus,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/order/{orderReference}/status',
                'operation_id': 'get_certificate_order_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_reference',
                ],
                'required': [
                    'order_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'order_reference',
                ]
            },
            root_map={
                'validations': {
                    ('order_reference',): {

                        'regex': {
                            'pattern': r'ord-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_reference':
                        (str,),
                },
                'attribute_map': {
                    'order_reference': 'orderReference',
                },
                'location_map': {
                    'order_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certificate_order_tasks_endpoint = _Endpoint(
            settings={
                'response_type': ([CertificateOrderTask],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/order/{orderReference}/tasks',
                'operation_id': 'get_certificate_order_tasks',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'order_reference',
                ],
                'required': [
                    'order_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'order_reference',
                ]
            },
            root_map={
                'validations': {
                    ('order_reference',): {

                        'regex': {
                            'pattern': r'ord-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'order_reference':
                        (str,),
                },
                'attribute_map': {
                    'order_reference': 'orderReference',
                },
                'location_map': {
                    'order_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certificate_orders_endpoint = _Endpoint(
            settings={
                'response_type': ([CertificateOrder],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/orders',
                'operation_id': 'get_certificate_orders',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'search_certificate_order',
                ],
                'required': [
                    'search_certificate_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search_certificate_order':
                        (SearchCertificateOrder,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search_certificate_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_client_endpoint = _Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/{clientReference}',
                'operation_id': 'get_client',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_reference',
                ],
                'required': [
                    'client_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_reference',
                ]
            },
            root_map={
                'validations': {
                    ('client_reference',): {

                        'regex': {
                            'pattern': r'cli-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_reference':
                        (str,),
                },
                'attribute_map': {
                    'client_reference': 'clientReference',
                },
                'location_map': {
                    'client_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_prevalidated_domain_endpoint = _Endpoint(
            settings={
                'response_type': (ClientDNS,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{prevalidatedDomainReference}',
                'operation_id': 'get_client_prevalidated_domain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'prevalidated_domain_reference',
                ],
                'required': [
                    'prevalidated_domain_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'prevalidated_domain_reference',
                ]
            },
            root_map={
                'validations': {
                    ('prevalidated_domain_reference',): {

                        'regex': {
                            'pattern': r'cld-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'prevalidated_domain_reference':
                        (str,),
                },
                'attribute_map': {
                    'prevalidated_domain_reference': 'prevalidatedDomainReference',
                },
                'location_map': {
                    'prevalidated_domain_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_prevalidated_domains_endpoint = _Endpoint(
            settings={
                'response_type': ([ClientDNS],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{clientReference}/list',
                'operation_id': 'get_client_prevalidated_domains',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_reference',
                ],
                'required': [
                    'client_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_reference',
                ]
            },
            root_map={
                'validations': {
                    ('client_reference',): {

                        'regex': {
                            'pattern': r'cli-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_reference':
                        (str,),
                },
                'attribute_map': {
                    'client_reference': 'clientReference',
                },
                'location_map': {
                    'client_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.issue_certificate_endpoint = _Endpoint(
            settings={
                'response_type': (CertificateOrder,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/issue/csr/{productReference}',
                'operation_id': 'issue_certificate',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'product_reference',
                    'body',
                ],
                'required': [
                    'product_reference',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'product_reference',
                ]
            },
            root_map={
                'validations': {
                    ('product_reference',): {

                        'regex': {
                            'pattern': r'pma-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'product_reference':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'product_reference': 'productReference',
                },
                'location_map': {
                    'product_reference': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.jwt_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/v2/jwt/{userName}',
                'operation_id': 'jwt',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_name',
                    'user_secret',
                ],
                'required': [
                    'user_name',
                    'user_secret',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_name':
                        (str,),
                    'user_secret':
                        (str,),
                },
                'attribute_map': {
                    'user_name': 'userName',
                    'user_secret': 'userSecret',
                },
                'location_map': {
                    'user_name': 'path',
                    'user_secret': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.reset_client_prevalidated_domain_endpoint = _Endpoint(
            settings={
                'response_type': (ClientDNS,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{prevalidatedDomainReference}/token/reset',
                'operation_id': 'reset_client_prevalidated_domain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'prevalidated_domain_reference',
                ],
                'required': [
                    'prevalidated_domain_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'prevalidated_domain_reference',
                ]
            },
            root_map={
                'validations': {
                    ('prevalidated_domain_reference',): {

                        'regex': {
                            'pattern': r'cld-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'prevalidated_domain_reference':
                        (str,),
                },
                'attribute_map': {
                    'prevalidated_domain_reference': 'prevalidatedDomainReference',
                },
                'location_map': {
                    'prevalidated_domain_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.revoke_certificates_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/revoke',
                'operation_id': 'revoke_certificates',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'revocation_request',
                ],
                'required': [
                    'revocation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'revocation_request':
                        ([RevocationRequest],),
                },
                'attribute_map': {
                },
                'location_map': {
                    'revocation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.search_clients_endpoint = _Endpoint(
            settings={
                'response_type': ([Client],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/clients',
                'operation_id': 'search_clients',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (str,),
                },
                'attribute_map': {
                    'search': 'search',
                },
                'location_map': {
                    'search': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.validate_client_prevalidated_domain_endpoint = _Endpoint(
            settings={
                'response_type': (ClientDNS,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v2/client/domain/{prevalidatedDomainReference}/validate',
                'operation_id': 'validate_client_prevalidated_domain',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'prevalidated_domain_reference',
                ],
                'required': [
                    'prevalidated_domain_reference',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'prevalidated_domain_reference',
                ]
            },
            root_map={
                'validations': {
                    ('prevalidated_domain_reference',): {

                        'regex': {
                            'pattern': r'cld-[0-9a-f-]{36}',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'prevalidated_domain_reference':
                        (str,),
                },
                'attribute_map': {
                    'prevalidated_domain_reference': 'prevalidatedDomainReference',
                },
                'location_map': {
                    'prevalidated_domain_reference': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_client_prevalidated_domains(
        self,
        client_reference,
        request_body,
        **kwargs
    ):
        """Register new prevalidated domains for the selected client given its reference Id  # noqa: E501

        Create and issue domains pre validation tokens for the selected client   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_client_prevalidated_domains(client_reference, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            client_reference (str): Client reference UUID
            request_body ([str]): Client domains

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ClientDNS]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_reference'] = \
            client_reference
        kwargs['request_body'] = \
            request_body
        return self.create_client_prevalidated_domains_endpoint.call_with_http_info(**kwargs)

    def delete_client_prevalidated_domain(
        self,
        prevalidated_domain_reference,
        **kwargs
    ):
        """Delete prevalidated domain for the selected reference Id  # noqa: E501

        Delete pre validated domain   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_client_prevalidated_domain(prevalidated_domain_reference, async_req=True)
        >>> result = thread.get()

        Args:
            prevalidated_domain_reference (str): Pre validated domain reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['prevalidated_domain_reference'] = \
            prevalidated_domain_reference
        return self.delete_client_prevalidated_domain_endpoint.call_with_http_info(**kwargs)

    def delete_client_prevalidated_domain_token(
        self,
        prevalidated_domain_reference,
        **kwargs
    ):
        """Delete prevalidated domain token for the selected reference Id  # noqa: E501

        Delete pre validated domain token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_client_prevalidated_domain_token(prevalidated_domain_reference, async_req=True)
        >>> result = thread.get()

        Args:
            prevalidated_domain_reference (str): Pre validated domain reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClientDNS
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['prevalidated_domain_reference'] = \
            prevalidated_domain_reference
        return self.delete_client_prevalidated_domain_token_endpoint.call_with_http_info(**kwargs)

    def get_certificate_chain(
        self,
        order_reference,
        **kwargs
    ):
        """Retrieve the certificate chain for the given Order reference  # noqa: E501

        Retrieve the certificate chain base64 encoded text. First element in list is leaf certificate, last element is Root certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certificate_chain(order_reference, async_req=True)
        >>> result = thread.get()

        Args:
            order_reference (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [str]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['order_reference'] = \
            order_reference
        return self.get_certificate_chain_endpoint.call_with_http_info(**kwargs)

    def get_certificate_order(
        self,
        order_reference,
        **kwargs
    ):
        """Retrieve a Certificate Order given the Order reference  # noqa: E501

        Retrieve a certificate order given the order reference identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certificate_order(order_reference, async_req=True)
        >>> result = thread.get()

        Args:
            order_reference (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CertificateOrder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['order_reference'] = \
            order_reference
        return self.get_certificate_order_endpoint.call_with_http_info(**kwargs)

    def get_certificate_order_status(
        self,
        order_reference,
        **kwargs
    ):
        """Retrieve a Certificate Order status given the Order reference  # noqa: E501

        Retrieve a certificate order status given the order reference identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certificate_order_status(order_reference, async_req=True)
        >>> result = thread.get()

        Args:
            order_reference (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CertificateOrderStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['order_reference'] = \
            order_reference
        return self.get_certificate_order_status_endpoint.call_with_http_info(**kwargs)

    def get_certificate_order_tasks(
        self,
        order_reference,
        **kwargs
    ):
        """Retrieve a Certificate Order Tasks given the Order reference  # noqa: E501

        Retrieve a certificate order tasks given the order reference identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certificate_order_tasks(order_reference, async_req=True)
        >>> result = thread.get()

        Args:
            order_reference (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CertificateOrderTask]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['order_reference'] = \
            order_reference
        return self.get_certificate_order_tasks_endpoint.call_with_http_info(**kwargs)

    def get_certificate_orders(
        self,
        search_certificate_order,
        **kwargs
    ):
        """Search Certificate Orders  # noqa: E501

        Search for Certificate Orders given search parameters   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certificate_orders(search_certificate_order, async_req=True)
        >>> result = thread.get()

        Args:
            search_certificate_order (SearchCertificateOrder): Certificate order search options

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CertificateOrder]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['search_certificate_order'] = \
            search_certificate_order
        return self.get_certificate_orders_endpoint.call_with_http_info(**kwargs)

    def get_client(
        self,
        client_reference,
        **kwargs
    ):
        """Get a client given its reference Id  # noqa: E501

        Get a client given its reference UUID   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client(client_reference, async_req=True)
        >>> result = thread.get()

        Args:
            client_reference (str): Client reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Client
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_reference'] = \
            client_reference
        return self.get_client_endpoint.call_with_http_info(**kwargs)

    def get_client_prevalidated_domain(
        self,
        prevalidated_domain_reference,
        **kwargs
    ):
        """Get prevalidated domains for the selected domain reference Id  # noqa: E501

        Get pre validatied domain token for the selected identifier   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_prevalidated_domain(prevalidated_domain_reference, async_req=True)
        >>> result = thread.get()

        Args:
            prevalidated_domain_reference (str): Pre validated domain reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClientDNS
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['prevalidated_domain_reference'] = \
            prevalidated_domain_reference
        return self.get_client_prevalidated_domain_endpoint.call_with_http_info(**kwargs)

    def get_client_prevalidated_domains(
        self,
        client_reference,
        **kwargs
    ):
        """Get the list of prevalidated domains for the selected client given its reference Id  # noqa: E501

        Retrieve the list of pre validated domains and their status for the selected client   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_prevalidated_domains(client_reference, async_req=True)
        >>> result = thread.get()

        Args:
            client_reference (str): Client reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ClientDNS]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_reference'] = \
            client_reference
        return self.get_client_prevalidated_domains_endpoint.call_with_http_info(**kwargs)

    def issue_certificate(
        self,
        product_reference,
        body,
        **kwargs
    ):
        """Issue certificate using CSR  # noqa: E501

        Issue a certificate based on the Product reference (CSR)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.issue_certificate(product_reference, body, async_req=True)
        >>> result = thread.get()

        Args:
            product_reference (str): Certificate product reference UUID
            body (str): Certificate Request in Base64 with start/end beacon

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CertificateOrder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['product_reference'] = \
            product_reference
        kwargs['body'] = \
            body
        return self.issue_certificate_endpoint.call_with_http_info(**kwargs)

    def jwt(
        self,
        user_name,
        user_secret,
        **kwargs
    ):
        """Produce a user JWT  # noqa: E501

        Helper service to generate a JWT derived from you login username and API Key --- * Use the generated JWT in the header of __each__ HTTP request to the service  `Authorization: Bearer <encoded JWT>`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.jwt(user_name, user_secret, async_req=True)
        >>> result = thread.get()

        Args:
            user_name (str):
            user_secret (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_name'] = \
            user_name
        kwargs['user_secret'] = \
            user_secret
        return self.jwt_endpoint.call_with_http_info(**kwargs)

    def reset_client_prevalidated_domain(
        self,
        prevalidated_domain_reference,
        **kwargs
    ):
        """Reset prevalidated domain token for the selected reference Id  # noqa: E501

        Reset pre validated domain token   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_client_prevalidated_domain(prevalidated_domain_reference, async_req=True)
        >>> result = thread.get()

        Args:
            prevalidated_domain_reference (str): Pre validated domain reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClientDNS
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['prevalidated_domain_reference'] = \
            prevalidated_domain_reference
        return self.reset_client_prevalidated_domain_endpoint.call_with_http_info(**kwargs)

    def revoke_certificates(
        self,
        revocation_request,
        **kwargs
    ):
        """Revoke certificates  # noqa: E501

        Revoke one or more certificates   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_certificates(revocation_request, async_req=True)
        >>> result = thread.get()

        Args:
            revocation_request ([RevocationRequest]): Certificate references to revoke

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['revocation_request'] = \
            revocation_request
        return self.revoke_certificates_endpoint.call_with_http_info(**kwargs)

    def search_clients(
        self,
        **kwargs
    ):
        """Search Clients available to the RA Operator  # noqa: E501

        Search for clients for which the RA Operator can issue, revoke or pre validate DNS entries. The Client information includes the list of assigned certificate products.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_clients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            search (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Client]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_clients_endpoint.call_with_http_info(**kwargs)

    def validate_client_prevalidated_domain(
        self,
        prevalidated_domain_reference,
        **kwargs
    ):
        """Prevalidate domain for the selected domain reference Id  # noqa: E501

        Pre validate domain token for the selected identifier   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_client_prevalidated_domain(prevalidated_domain_reference, async_req=True)
        >>> result = thread.get()

        Args:
            prevalidated_domain_reference (str): Pre validated domain reference UUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClientDNS
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['prevalidated_domain_reference'] = \
            prevalidated_domain_reference
        return self.validate_client_prevalidated_domain_endpoint.call_with_http_info(**kwargs)

