/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 2.3.12
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.AdditionalRecipient;
import org.openapitools.client.model.CertificateOrder;
import org.openapitools.client.model.CertificateOrderStatus;
import org.openapitools.client.model.CertificateOrderTask;
import org.openapitools.client.model.CertificateOrders;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.ClientDNS;
import org.openapitools.client.model.Clients;
import org.openapitools.client.model.IssueRequest;
import org.openapitools.client.model.RevocationRequest;
import org.openapitools.client.model.SearchCertificateOrder;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiRegistrationApi
 */
@Disabled
public class ApiRegistrationApiTest {

    private final ApiRegistrationApi api = new ApiRegistrationApi();

    /**
     * Add additional recipients to Certificate Order
     *
     * Add additional recipients to Certificate Order. Existing users are skipped. Retuns list of effectively added additional recipients. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCertificateOrderAdditionalRecipientsTest() throws ApiException {
        String orderReference = null;
        List<AdditionalRecipient> additionalRecipient = null;
        List<AdditionalRecipient> response = api.addCertificateOrderAdditionalRecipients(orderReference, additionalRecipient);
        // TODO: test validations
    }

    /**
     * Register new prevalidated domains for the selected client given its reference Id
     *
     * Create and issue domains pre validation tokens for the selected client 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClientPrevalidatedDomainsTest() throws ApiException {
        String clientReference = null;
        List<String> requestBody = null;
        List<ClientDNS> response = api.createClientPrevalidatedDomains(clientReference, requestBody);
        // TODO: test validations
    }

    /**
     * Delete additional recipients to Certificate Order
     *
     * Delete additional recipients to Certificate Order. Unknown users are skipped. Retuns list of effectively deleted additional recipients. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateOrderAdditionalRecipientsTest() throws ApiException {
        String orderReference = null;
        List<AdditionalRecipient> additionalRecipient = null;
        List<AdditionalRecipient> response = api.deleteCertificateOrderAdditionalRecipients(orderReference, additionalRecipient);
        // TODO: test validations
    }

    /**
     * Delete prevalidated domain for the selected reference Id
     *
     * Delete pre validated domain 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientPrevalidatedDomainTest() throws ApiException {
        String prevalidatedDomainReference = null;
        api.deleteClientPrevalidatedDomain(prevalidatedDomainReference);
        // TODO: test validations
    }

    /**
     * Delete prevalidated domain token for the selected reference Id
     *
     * Delete pre validated domain token 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteClientPrevalidatedDomainTokenTest() throws ApiException {
        String prevalidatedDomainReference = null;
        ClientDNS response = api.deleteClientPrevalidatedDomainToken(prevalidatedDomainReference);
        // TODO: test validations
    }

    /**
     * Retrieve the certificate chain for the given Order reference
     *
     * Retrieve the certificate chain base64 encoded text. First element in list is leaf certificate, last element is Root certificate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateChainTest() throws ApiException {
        String orderReference = null;
        List<String> response = api.getCertificateChain(orderReference);
        // TODO: test validations
    }

    /**
     * Retrieve a Certificate Order given the Order reference
     *
     * Retrieve a certificate order given the order reference identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateOrderTest() throws ApiException {
        String orderReference = null;
        CertificateOrder response = api.getCertificateOrder(orderReference);
        // TODO: test validations
    }

    /**
     * Retrieve a Certificate Order status given the Order reference
     *
     * Retrieve a certificate order status given the order reference identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateOrderStatusTest() throws ApiException {
        String orderReference = null;
        CertificateOrderStatus response = api.getCertificateOrderStatus(orderReference);
        // TODO: test validations
    }

    /**
     * Retrieve a Certificate Order Tasks given the Order reference
     *
     * Retrieve a certificate order tasks given the order reference identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateOrderTasksTest() throws ApiException {
        String orderReference = null;
        List<CertificateOrderTask> response = api.getCertificateOrderTasks(orderReference);
        // TODO: test validations
    }

    /**
     * Search Certificate Orders
     *
     * Search for Certificate Orders given search parameters. The result list is limited to the maximum (default is 300) query result list settings. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateOrdersTest() throws ApiException {
        SearchCertificateOrder searchCertificateOrder = null;
        List<CertificateOrder> response = api.getCertificateOrders(searchCertificateOrder);
        // TODO: test validations
    }

    /**
     * Get a client given its reference Id
     *
     * Get a client given its reference UUID 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientTest() throws ApiException {
        String clientReference = null;
        Client response = api.getClient(clientReference);
        // TODO: test validations
    }

    /**
     * Get prevalidated domains for the selected domain reference Id
     *
     * Get pre validatied domain token for the selected identifier 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientPrevalidatedDomainTest() throws ApiException {
        String prevalidatedDomainReference = null;
        ClientDNS response = api.getClientPrevalidatedDomain(prevalidatedDomainReference);
        // TODO: test validations
    }

    /**
     * Get the list of prevalidated domains for the selected client given its reference Id
     *
     * Retrieve the list of pre validated domains and their status for the selected client 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientPrevalidatedDomainsTest() throws ApiException {
        String clientReference = null;
        List<ClientDNS> response = api.getClientPrevalidatedDomains(clientReference);
        // TODO: test validations
    }

    /**
     * Issue certificate using CSR
     *
     * Issue a certificate based on the Product reference (CSR) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCertificateTest() throws ApiException {
        String productReference = null;
        String body = null;
        CertificateOrder response = api.issueCertificate(productReference, body);
        // TODO: test validations
    }

    /**
     * Issue certificate using extended request attributes
     *
     * Issue a certificate based on the Product reference with extended attributes and CSR 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueCertificateV22Test() throws ApiException {
        IssueRequest issueRequest = null;
        CertificateOrder response = api.issueCertificateV22(issueRequest);
        // TODO: test validations
    }

    /**
     * Produce a user JWT
     *
     * Helper service to generate a JWT derived from you login username and API Key --- * Use the generated JWT in the header of __each__ HTTP request to the service  &#x60;Authorization: Bearer &lt;encoded JWT&gt;&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jwtTest() throws ApiException {
        String userName = null;
        String userSecret = null;
        String response = api.jwt(userName, userSecret);
        // TODO: test validations
    }

    /**
     * Obtain a list of additional Certificate Order recipients
     *
     * List additional Certificate Order recipients 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCertificateOrderAdditionalRecipientsTest() throws ApiException {
        String orderReference = null;
        List<AdditionalRecipient> response = api.listCertificateOrderAdditionalRecipients(orderReference);
        // TODO: test validations
    }

    /**
     * Send a certificate publication request for selected Certificate Order
     *
     * Publish or republish a certificate to the external source (LDAP, SFTP or file system). Publication rule must be enabled on the issued certificate. An error is raised if the certificate is already published. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishCertificateTest() throws ApiException {
        String orderReference = null;
        api.publishCertificate(orderReference);
        // TODO: test validations
    }

    /**
     * Reset prevalidated domain token for the selected reference Id
     *
     * Reset pre validated domain token 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetClientPrevalidatedDomainTest() throws ApiException {
        String prevalidatedDomainReference = null;
        ClientDNS response = api.resetClientPrevalidatedDomain(prevalidatedDomainReference);
        // TODO: test validations
    }

    /**
     * Revoke certificates
     *
     * Revoke one or more certificates 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeCertificatesTest() throws ApiException {
        List<RevocationRequest> revocationRequest = null;
        api.revokeCertificates(revocationRequest);
        // TODO: test validations
    }

    /**
     * Search Clients available to the RA Operator
     *
     * Search for clients for which the RA Operator can issue, revoke or pre validate DNS entries. The Client information includes the list of assigned certificate products. The result list is limited to the maximum (default is 300) query result list settings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchClientsTest() throws ApiException {
        String search = null;
        List<Client> response = api.searchClients(search);
        // TODO: test validations
    }

    /**
     * Search Certificate Orders
     *
     * Search for Certificate Orders given search parameters. The search supports paging 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPagedCertificateOrdersTest() throws ApiException {
        SearchCertificateOrder searchCertificateOrder = null;
        Integer length = null;
        Integer start = null;
        CertificateOrders response = api.searchPagedCertificateOrders(searchCertificateOrder, length, start);
        // TODO: test validations
    }

    /**
     * Search Clients available to the RA Operator
     *
     * Search for clients for which the RA Operator can issue, revoke or pre validate DNS entries. The Client information includes the list of assigned certificate products. The search supports paging 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPagedClientsTest() throws ApiException {
        String search = null;
        Integer length = null;
        Integer start = null;
        Clients response = api.searchPagedClients(search, length, start);
        // TODO: test validations
    }

    /**
     * Send a certificate un-publication request for selected Certificate Order
     *
     * Remove the certificate from the external source (LDAP, SFTP or file system). Publication rule must be enabled on the issued certificate. An error is raised if the certificate is already un published. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpublishCertificateTest() throws ApiException {
        String orderReference = null;
        api.unpublishCertificate(orderReference);
        // TODO: test validations
    }

    /**
     * Prevalidate domain for the selected domain reference Id
     *
     * Pre validate domain token for the selected identifier 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateClientPrevalidatedDomainTest() throws ApiException {
        String prevalidatedDomainReference = null;
        ClientDNS response = api.validateClientPrevalidatedDomain(prevalidatedDomainReference);
        // TODO: test validations
    }

}
