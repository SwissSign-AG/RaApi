/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 3.4.4
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RequestExtensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestOverrides
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class RequestOverrides {
  public static final String SERIALIZED_NAME_SUBJECT_D_N = "subjectDN";
  @SerializedName(SERIALIZED_NAME_SUBJECT_D_N)
  @javax.annotation.Nullable
  private String subjectDN;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  @javax.annotation.Nullable
  private Integer validity;

  public static final String SERIALIZED_NAME_REQUEST_EXTENSIONS = "requestExtensions";
  @SerializedName(SERIALIZED_NAME_REQUEST_EXTENSIONS)
  @javax.annotation.Nullable
  private RequestExtensions requestExtensions;

  public RequestOverrides() {
  }

  public RequestOverrides subjectDN(@javax.annotation.Nullable String subjectDN) {
    this.subjectDN = subjectDN;
    return this;
  }

  /**
   * Override the CSR Subject Distinguished Name with user provided value Supported attributes are (lower or uppercase):   - c, country (Country)   - o, organization (Organization)   - ou, organizationalUnit (Organizational Unit)   - t, title (Title)    - cn, commonName (Common Name)   - sn, surName (Surname)   - gn, givenName (Given name)   - i, initials (Initials)   - street, streetAddress (Street Address)   - serialnumber (Serial number)   - l, locality (Locality)   - st, state (State)   - e, email, emailAddress (Email)   - dc, domainController (Domain Controller)   - uid (UID)   - generationQualifier, generation (Generation Qualifier)   - description (Description)   - role (Role)   - joil (Jurisdiction of Incorporation, Locality)   - joist (Jurisdiction of Incorporation, State)   - joic (Jurisdiction of Incorporation, Country)   - orgId, organizationIdentifier (Organization Identifier)   - uniqueIdentifier (Unique Identifier)   - name (Name)   - pseudonym (Pseudonym)   - postalAddress (Postal Address)   - postalCode (Postal Code)   - unstructuredaddress (Unstructed Address)   - unstructuredname (Unstructed Name)   - dn (DN Qualifier)   - nameatbirth (Name at Birth)   - countryofcitizenship (Country of Citizenship)   - countryofresidence (Country of Residence)   - gender (Gender)   - placeofbirth (Place of Birth)   - dateofbirth (Date of Birth)   - businesscategory (Business Category)   - telephonenumber (Telephone Number)   - scionisdasnumber (SCION ISD AS Number)   - tpmmanufacturer (TPM Manufacturer)   - tpmmodel (TPM Model)   - tpmversion (TPM Version) 
   * @return subjectDN
   */
  @javax.annotation.Nullable
  public String getSubjectDN() {
    return subjectDN;
  }

  public void setSubjectDN(@javax.annotation.Nullable String subjectDN) {
    this.subjectDN = subjectDN;
  }


  public RequestOverrides validity(@javax.annotation.Nullable Integer validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Optional certificate validity set if enabled on the Product 
   * minimum: 1
   * @return validity
   */
  @javax.annotation.Nullable
  public Integer getValidity() {
    return validity;
  }

  public void setValidity(@javax.annotation.Nullable Integer validity) {
    this.validity = validity;
  }


  public RequestOverrides requestExtensions(@javax.annotation.Nullable RequestExtensions requestExtensions) {
    this.requestExtensions = requestExtensions;
    return this;
  }

  /**
   * Get requestExtensions
   * @return requestExtensions
   */
  @javax.annotation.Nullable
  public RequestExtensions getRequestExtensions() {
    return requestExtensions;
  }

  public void setRequestExtensions(@javax.annotation.Nullable RequestExtensions requestExtensions) {
    this.requestExtensions = requestExtensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestOverrides requestOverrides = (RequestOverrides) o;
    return Objects.equals(this.subjectDN, requestOverrides.subjectDN) &&
        Objects.equals(this.validity, requestOverrides.validity) &&
        Objects.equals(this.requestExtensions, requestOverrides.requestExtensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjectDN, validity, requestExtensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestOverrides {\n");
    sb.append("    subjectDN: ").append(toIndentedString(subjectDN)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    requestExtensions: ").append(toIndentedString(requestExtensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subjectDN");
    openapiFields.add("validity");
    openapiFields.add("requestExtensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestOverrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestOverrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestOverrides is not found in the empty JSON string", RequestOverrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestOverrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestOverrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("subjectDN") != null && !jsonObj.get("subjectDN").isJsonNull()) && !jsonObj.get("subjectDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectDN").toString()));
      }
      // validate the optional field `requestExtensions`
      if (jsonObj.get("requestExtensions") != null && !jsonObj.get("requestExtensions").isJsonNull()) {
        RequestExtensions.validateJsonElement(jsonObj.get("requestExtensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestOverrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestOverrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestOverrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestOverrides.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestOverrides>() {
           @Override
           public void write(JsonWriter out, RequestOverrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestOverrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestOverrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestOverrides
   * @throws IOException if the JSON string is invalid with respect to RequestOverrides
   */
  public static RequestOverrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestOverrides.class);
  }

  /**
   * Convert an instance of RequestOverrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

