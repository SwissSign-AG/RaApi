/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 3.4.4
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ClientDomainValidationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientDNS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ClientDNS {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  @javax.annotation.Nonnull
  private String uuid;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nonnull
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_UNICODE = "domainUnicode";
  @SerializedName(SERIALIZED_NAME_DOMAIN_UNICODE)
  @javax.annotation.Nonnull
  private String domainUnicode;

  public static final String SERIALIZED_NAME_VALIDATED = "validated";
  @SerializedName(SERIALIZED_NAME_VALIDATED)
  @javax.annotation.Nonnull
  private Boolean validated;

  public static final String SERIALIZED_NAME_TRUSTED_DOMAIN = "trustedDomain";
  @SerializedName(SERIALIZED_NAME_TRUSTED_DOMAIN)
  @javax.annotation.Nonnull
  private Boolean trustedDomain;

  public static final String SERIALIZED_NAME_TIME_VALIDATED = "timeValidated";
  @SerializedName(SERIALIZED_NAME_TIME_VALIDATED)
  @javax.annotation.Nullable
  private OffsetDateTime timeValidated;

  public static final String SERIALIZED_NAME_VALIDATION_METHOD = "validationMethod";
  @SerializedName(SERIALIZED_NAME_VALIDATION_METHOD)
  @javax.annotation.Nonnull
  private String validationMethod;

  public static final String SERIALIZED_NAME_RANDOM_VALUE = "randomValue";
  @SerializedName(SERIALIZED_NAME_RANDOM_VALUE)
  @javax.annotation.Nullable
  private String randomValue;

  public static final String SERIALIZED_NAME_RANDOM_VALUE_TIME_CREATED = "randomValueTimeCreated";
  @SerializedName(SERIALIZED_NAME_RANDOM_VALUE_TIME_CREATED)
  @javax.annotation.Nullable
  private OffsetDateTime randomValueTimeCreated;

  public static final String SERIALIZED_NAME_RANDOM_VALUE_TIME_EXPIRE = "randomValueTimeExpire";
  @SerializedName(SERIALIZED_NAME_RANDOM_VALUE_TIME_EXPIRE)
  @javax.annotation.Nullable
  private OffsetDateTime randomValueTimeExpire;

  public static final String SERIALIZED_NAME_VALIDATION_RESULT = "validationResult";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RESULT)
  @javax.annotation.Nullable
  private String validationResult;

  public static final String SERIALIZED_NAME_TIME_EXPIRED = "timeExpired";
  @SerializedName(SERIALIZED_NAME_TIME_EXPIRED)
  @javax.annotation.Nullable
  private OffsetDateTime timeExpired;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  @javax.annotation.Nonnull
  private Boolean expired;

  public static final String SERIALIZED_NAME_RANDOM_VALUE_TIME_EXPIRED = "randomValueTimeExpired";
  @SerializedName(SERIALIZED_NAME_RANDOM_VALUE_TIME_EXPIRED)
  @javax.annotation.Nonnull
  private Boolean randomValueTimeExpired;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private ClientDomainValidationStatus status;

  public ClientDNS() {
  }

  public ClientDNS(
     String uuid, 
     String domainUnicode, 
     Boolean validated, 
     OffsetDateTime timeValidated, 
     String validationMethod, 
     String randomValue, 
     OffsetDateTime randomValueTimeCreated, 
     OffsetDateTime randomValueTimeExpire, 
     String validationResult, 
     OffsetDateTime timeExpired, 
     Boolean expired, 
     Boolean randomValueTimeExpired
  ) {
    this();
    this.uuid = uuid;
    this.domainUnicode = domainUnicode;
    this.validated = validated;
    this.timeValidated = timeValidated;
    this.validationMethod = validationMethod;
    this.randomValue = randomValue;
    this.randomValueTimeCreated = randomValueTimeCreated;
    this.randomValueTimeExpire = randomValueTimeExpire;
    this.validationResult = validationResult;
    this.timeExpired = timeExpired;
    this.expired = expired;
    this.randomValueTimeExpired = randomValueTimeExpired;
  }

  /**
   * Pre validated client domain reference
   * @return uuid
   */
  @javax.annotation.Nonnull
  public String getUuid() {
    return uuid;
  }



  public ClientDNS domain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Client domain in punycode
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
  }


  /**
   * Client domain in unicode
   * @return domainUnicode
   */
  @javax.annotation.Nonnull
  public String getDomainUnicode() {
    return domainUnicode;
  }



  /**
   * Indicates if the domain is validated
   * @return validated
   */
  @javax.annotation.Nonnull
  public Boolean getValidated() {
    return validated;
  }



  public ClientDNS trustedDomain(@javax.annotation.Nonnull Boolean trustedDomain) {
    this.trustedDomain = trustedDomain;
    return this;
  }

  /**
   * Indicates if the domain is a trusted domain (for private PKIs). This setting is linked to the certificate product DNS validation rule for Private PKIs.
   * @return trustedDomain
   */
  @javax.annotation.Nonnull
  public Boolean getTrustedDomain() {
    return trustedDomain;
  }

  public void setTrustedDomain(@javax.annotation.Nonnull Boolean trustedDomain) {
    this.trustedDomain = trustedDomain;
  }


  /**
   * Indicates when the domain got validated
   * @return timeValidated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeValidated() {
    return timeValidated;
  }



  /**
   * DNS validation type
   * @return validationMethod
   */
  @javax.annotation.Nonnull
  public String getValidationMethod() {
    return validationMethod;
  }



  /**
   * The random value to add to the DNS TXT record for the domain
   * @return randomValue
   */
  @javax.annotation.Nullable
  public String getRandomValue() {
    return randomValue;
  }



  /**
   * Indicates when the random value was created
   * @return randomValueTimeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRandomValueTimeCreated() {
    return randomValueTimeCreated;
  }



  /**
   * Indicates when the random value expires
   * @return randomValueTimeExpire
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRandomValueTimeExpire() {
    return randomValueTimeExpire;
  }



  /**
   * Indicates the validation result
   * @return validationResult
   */
  @javax.annotation.Nullable
  public String getValidationResult() {
    return validationResult;
  }



  /**
   * Indicates when the random value was created
   * @return timeExpired
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeExpired() {
    return timeExpired;
  }



  /**
   * Indicates if the pre validation of the domain has expired
   * @return expired
   */
  @javax.annotation.Nonnull
  public Boolean getExpired() {
    return expired;
  }



  /**
   * Indicates if the random value is expired
   * @return randomValueTimeExpired
   */
  @javax.annotation.Nonnull
  public Boolean getRandomValueTimeExpired() {
    return randomValueTimeExpired;
  }



  public ClientDNS status(@javax.annotation.Nullable ClientDomainValidationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ClientDomainValidationStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable ClientDomainValidationStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientDNS clientDNS = (ClientDNS) o;
    return Objects.equals(this.uuid, clientDNS.uuid) &&
        Objects.equals(this.domain, clientDNS.domain) &&
        Objects.equals(this.domainUnicode, clientDNS.domainUnicode) &&
        Objects.equals(this.validated, clientDNS.validated) &&
        Objects.equals(this.trustedDomain, clientDNS.trustedDomain) &&
        Objects.equals(this.timeValidated, clientDNS.timeValidated) &&
        Objects.equals(this.validationMethod, clientDNS.validationMethod) &&
        Objects.equals(this.randomValue, clientDNS.randomValue) &&
        Objects.equals(this.randomValueTimeCreated, clientDNS.randomValueTimeCreated) &&
        Objects.equals(this.randomValueTimeExpire, clientDNS.randomValueTimeExpire) &&
        Objects.equals(this.validationResult, clientDNS.validationResult) &&
        Objects.equals(this.timeExpired, clientDNS.timeExpired) &&
        Objects.equals(this.expired, clientDNS.expired) &&
        Objects.equals(this.randomValueTimeExpired, clientDNS.randomValueTimeExpired) &&
        Objects.equals(this.status, clientDNS.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, domain, domainUnicode, validated, trustedDomain, timeValidated, validationMethod, randomValue, randomValueTimeCreated, randomValueTimeExpire, validationResult, timeExpired, expired, randomValueTimeExpired, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientDNS {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainUnicode: ").append(toIndentedString(domainUnicode)).append("\n");
    sb.append("    validated: ").append(toIndentedString(validated)).append("\n");
    sb.append("    trustedDomain: ").append(toIndentedString(trustedDomain)).append("\n");
    sb.append("    timeValidated: ").append(toIndentedString(timeValidated)).append("\n");
    sb.append("    validationMethod: ").append(toIndentedString(validationMethod)).append("\n");
    sb.append("    randomValue: ").append(toIndentedString(randomValue)).append("\n");
    sb.append("    randomValueTimeCreated: ").append(toIndentedString(randomValueTimeCreated)).append("\n");
    sb.append("    randomValueTimeExpire: ").append(toIndentedString(randomValueTimeExpire)).append("\n");
    sb.append("    validationResult: ").append(toIndentedString(validationResult)).append("\n");
    sb.append("    timeExpired: ").append(toIndentedString(timeExpired)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    randomValueTimeExpired: ").append(toIndentedString(randomValueTimeExpired)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("domain");
    openapiFields.add("domainUnicode");
    openapiFields.add("validated");
    openapiFields.add("trustedDomain");
    openapiFields.add("timeValidated");
    openapiFields.add("validationMethod");
    openapiFields.add("randomValue");
    openapiFields.add("randomValueTimeCreated");
    openapiFields.add("randomValueTimeExpire");
    openapiFields.add("validationResult");
    openapiFields.add("timeExpired");
    openapiFields.add("expired");
    openapiFields.add("randomValueTimeExpired");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domainUnicode");
    openapiRequiredFields.add("validated");
    openapiRequiredFields.add("trustedDomain");
    openapiRequiredFields.add("validationMethod");
    openapiRequiredFields.add("expired");
    openapiRequiredFields.add("randomValueTimeExpired");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientDNS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientDNS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientDNS is not found in the empty JSON string", ClientDNS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientDNS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientDNS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientDNS.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("domainUnicode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainUnicode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainUnicode").toString()));
      }
      if (!jsonObj.get("validationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationMethod").toString()));
      }
      if ((jsonObj.get("randomValue") != null && !jsonObj.get("randomValue").isJsonNull()) && !jsonObj.get("randomValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `randomValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("randomValue").toString()));
      }
      if ((jsonObj.get("validationResult") != null && !jsonObj.get("validationResult").isJsonNull()) && !jsonObj.get("validationResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationResult").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ClientDomainValidationStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientDNS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientDNS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientDNS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientDNS.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientDNS>() {
           @Override
           public void write(JsonWriter out, ClientDNS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientDNS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientDNS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientDNS
   * @throws IOException if the JSON string is invalid with respect to ClientDNS
   */
  public static ClientDNS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientDNS.class);
  }

  /**
   * Convert an instance of ClientDNS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

