/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 3.4.4
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductValidity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ProductValidity {
  /**
   * Certificate validity types.   - YEARS: certificate validity in years.   - MONTHS: certificate validity in months.   - DAYS: certificate validity in days.   - HOURS: certificate validity in hours.   - MINUTES: certificate validity in minutes.   - SECONDS: certificate validity in seconds. 
   */
  @JsonAdapter(ValidityTypeEnum.Adapter.class)
  public enum ValidityTypeEnum {
    YEARS("YEARS"),
    
    MONTHS("MONTHS"),
    
    DAYS("DAYS"),
    
    HOURS("HOURS"),
    
    MINUTES("MINUTES"),
    
    SECONDS("SECONDS");

    private String value;

    ValidityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidityTypeEnum fromValue(String value) {
      for (ValidityTypeEnum b : ValidityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDITY_TYPE = "validityType";
  @SerializedName(SERIALIZED_NAME_VALIDITY_TYPE)
  @javax.annotation.Nonnull
  private ValidityTypeEnum validityType;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  @javax.annotation.Nullable
  private Integer validity;

  public static final String SERIALIZED_NAME_VALIDITY_OPTIONS = "validityOptions";
  @SerializedName(SERIALIZED_NAME_VALIDITY_OPTIONS)
  @javax.annotation.Nullable
  private List<Integer> validityOptions = new ArrayList<>();

  public ProductValidity() {
  }

  public ProductValidity(
     ValidityTypeEnum validityType, 
     Integer validity
  ) {
    this();
    this.validityType = validityType;
    this.validity = validity;
  }

  /**
   * Certificate validity types.   - YEARS: certificate validity in years.   - MONTHS: certificate validity in months.   - DAYS: certificate validity in days.   - HOURS: certificate validity in hours.   - MINUTES: certificate validity in minutes.   - SECONDS: certificate validity in seconds. 
   * @return validityType
   */
  @javax.annotation.Nonnull
  public ValidityTypeEnum getValidityType() {
    return validityType;
  }



  /**
   * The default certificate validity
   * @return validity
   */
  @javax.annotation.Nullable
  public Integer getValidity() {
    return validity;
  }



  public ProductValidity validityOptions(@javax.annotation.Nullable List<Integer> validityOptions) {
    this.validityOptions = validityOptions;
    return this;
  }

  public ProductValidity addValidityOptionsItem(Integer validityOptionsItem) {
    if (this.validityOptions == null) {
      this.validityOptions = new ArrayList<>();
    }
    this.validityOptions.add(validityOptionsItem);
    return this;
  }

  /**
   * Optional certificate validity values
   * @return validityOptions
   */
  @javax.annotation.Nullable
  public List<Integer> getValidityOptions() {
    return validityOptions;
  }

  public void setValidityOptions(@javax.annotation.Nullable List<Integer> validityOptions) {
    this.validityOptions = validityOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductValidity productValidity = (ProductValidity) o;
    return Objects.equals(this.validityType, productValidity.validityType) &&
        Objects.equals(this.validity, productValidity.validity) &&
        Objects.equals(this.validityOptions, productValidity.validityOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validityType, validity, validityOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductValidity {\n");
    sb.append("    validityType: ").append(toIndentedString(validityType)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    validityOptions: ").append(toIndentedString(validityOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validityType");
    openapiFields.add("validity");
    openapiFields.add("validityOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("validityType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductValidity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductValidity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductValidity is not found in the empty JSON string", ProductValidity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductValidity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductValidity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductValidity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("validityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validityType").toString()));
      }
      // validate the required field `validityType`
      ValidityTypeEnum.validateJsonElement(jsonObj.get("validityType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("validityOptions") != null && !jsonObj.get("validityOptions").isJsonNull() && !jsonObj.get("validityOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validityOptions` to be an array in the JSON string but got `%s`", jsonObj.get("validityOptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductValidity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductValidity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductValidity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductValidity.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductValidity>() {
           @Override
           public void write(JsonWriter out, ProductValidity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductValidity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductValidity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductValidity
   * @throws IOException if the JSON string is invalid with respect to ProductValidity
   */
  public static ProductValidity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductValidity.class);
  }

  /**
   * Convert an instance of ProductValidity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

