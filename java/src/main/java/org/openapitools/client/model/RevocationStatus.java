/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 3.4.4
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RevocationReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RevocationStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class RevocationStatus {
  public static final String SERIALIZED_NAME_REVOKED_ON = "revokedOn";
  @SerializedName(SERIALIZED_NAME_REVOKED_ON)
  @javax.annotation.Nonnull
  private OffsetDateTime revokedOn;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nonnull
  private RevocationReason reason;

  public static final String SERIALIZED_NAME_REVOKED_BY = "revokedBy";
  @SerializedName(SERIALIZED_NAME_REVOKED_BY)
  @javax.annotation.Nonnull
  private String revokedBy;

  public static final String SERIALIZED_NAME_REVOCATION_REQUESTOR = "revocationRequestor";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REQUESTOR)
  @javax.annotation.Nullable
  private String revocationRequestor;

  public RevocationStatus() {
  }

  public RevocationStatus(
     OffsetDateTime revokedOn, 
     String revokedBy
  ) {
    this();
    this.revokedOn = revokedOn;
    this.revokedBy = revokedBy;
  }

  /**
   * Revocation date in UTC
   * @return revokedOn
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getRevokedOn() {
    return revokedOn;
  }



  public RevocationStatus reason(@javax.annotation.Nonnull RevocationReason reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public RevocationReason getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nonnull RevocationReason reason) {
    this.reason = reason;
  }


  /**
   * email of the person who revoked the certificate
   * @return revokedBy
   */
  @javax.annotation.Nonnull
  public String getRevokedBy() {
    return revokedBy;
  }



  public RevocationStatus revocationRequestor(@javax.annotation.Nullable String revocationRequestor) {
    this.revocationRequestor = revocationRequestor;
    return this;
  }

  /**
   * First- and last name of revocation requestor
   * @return revocationRequestor
   */
  @javax.annotation.Nullable
  public String getRevocationRequestor() {
    return revocationRequestor;
  }

  public void setRevocationRequestor(@javax.annotation.Nullable String revocationRequestor) {
    this.revocationRequestor = revocationRequestor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RevocationStatus revocationStatus = (RevocationStatus) o;
    return Objects.equals(this.revokedOn, revocationStatus.revokedOn) &&
        Objects.equals(this.reason, revocationStatus.reason) &&
        Objects.equals(this.revokedBy, revocationStatus.revokedBy) &&
        Objects.equals(this.revocationRequestor, revocationStatus.revocationRequestor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(revokedOn, reason, revokedBy, revocationRequestor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RevocationStatus {\n");
    sb.append("    revokedOn: ").append(toIndentedString(revokedOn)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    revokedBy: ").append(toIndentedString(revokedBy)).append("\n");
    sb.append("    revocationRequestor: ").append(toIndentedString(revocationRequestor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("revokedOn");
    openapiFields.add("reason");
    openapiFields.add("revokedBy");
    openapiFields.add("revocationRequestor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("revokedOn");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("revokedBy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RevocationStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RevocationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RevocationStatus is not found in the empty JSON string", RevocationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RevocationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RevocationStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RevocationStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `reason`
      RevocationReason.validateJsonElement(jsonObj.get("reason"));
      if (!jsonObj.get("revokedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revokedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revokedBy").toString()));
      }
      if ((jsonObj.get("revocationRequestor") != null && !jsonObj.get("revocationRequestor").isJsonNull()) && !jsonObj.get("revocationRequestor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocationRequestor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revocationRequestor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RevocationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RevocationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RevocationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RevocationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<RevocationStatus>() {
           @Override
           public void write(JsonWriter out, RevocationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RevocationStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RevocationStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RevocationStatus
   * @throws IOException if the JSON string is invalid with respect to RevocationStatus
   */
  public static RevocationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RevocationStatus.class);
  }

  /**
   * Convert an instance of RevocationStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

