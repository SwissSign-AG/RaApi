/*
 * SwissSign RA REST API
 * See https://github.com/SwissSign-AG/RaApi/README.md
 *
 * The version of the OpenAPI document: 3.4.4
 * Contact: ssc@swisssign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertificateOrderStatus;
import org.openapitools.client.model.RevocationReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchCertificateOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SearchCertificateOrder {
  public static final String SERIALIZED_NAME_ORDER_REFERENCE = "orderReference";
  @SerializedName(SERIALIZED_NAME_ORDER_REFERENCE)
  @javax.annotation.Nullable
  private String orderReference;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nullable
  private String serialNumber;

  public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";
  @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
  @javax.annotation.Nullable
  private List<CertificateOrderStatus> orderStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVOCATION_REASON = "revocationReason";
  @SerializedName(SERIALIZED_NAME_REVOCATION_REASON)
  @javax.annotation.Nullable
  private List<RevocationReason> revocationReason = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REFERENCES = "clientReferences";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCES)
  @javax.annotation.Nullable
  private List<String> clientReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_AFTER = "startAfter";
  @SerializedName(SERIALIZED_NAME_START_AFTER)
  @javax.annotation.Nullable
  private OffsetDateTime startAfter;

  public static final String SERIALIZED_NAME_START_BEFORE = "startBefore";
  @SerializedName(SERIALIZED_NAME_START_BEFORE)
  @javax.annotation.Nullable
  private OffsetDateTime startBefore;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  @javax.annotation.Nullable
  private String attribute;

  public static final String SERIALIZED_NAME_INCLUDE_CERTIFICATE_CHAIN = "includeCertificateChain";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CERTIFICATE_CHAIN)
  @javax.annotation.Nullable
  private Boolean includeCertificateChain;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public SearchCertificateOrder() {
  }

  public SearchCertificateOrder orderReference(@javax.annotation.Nullable String orderReference) {
    this.orderReference = orderReference;
    return this;
  }

  /**
   * Certificate Order reference
   * @return orderReference
   */
  @javax.annotation.Nullable
  public String getOrderReference() {
    return orderReference;
  }

  public void setOrderReference(@javax.annotation.Nullable String orderReference) {
    this.orderReference = orderReference;
  }


  public SearchCertificateOrder serialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Certificate serial number (Big Integer HEX encoded) with optional wildcard attributes ? and/or *
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nullable String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public SearchCertificateOrder orderStatus(@javax.annotation.Nullable List<CertificateOrderStatus> orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public SearchCertificateOrder addOrderStatusItem(CertificateOrderStatus orderStatusItem) {
    if (this.orderStatus == null) {
      this.orderStatus = new ArrayList<>();
    }
    this.orderStatus.add(orderStatusItem);
    return this;
  }

  /**
   * Get orderStatus
   * @return orderStatus
   */
  @javax.annotation.Nullable
  public List<CertificateOrderStatus> getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(@javax.annotation.Nullable List<CertificateOrderStatus> orderStatus) {
    this.orderStatus = orderStatus;
  }


  public SearchCertificateOrder revocationReason(@javax.annotation.Nullable List<RevocationReason> revocationReason) {
    this.revocationReason = revocationReason;
    return this;
  }

  public SearchCertificateOrder addRevocationReasonItem(RevocationReason revocationReasonItem) {
    if (this.revocationReason == null) {
      this.revocationReason = new ArrayList<>();
    }
    this.revocationReason.add(revocationReasonItem);
    return this;
  }

  /**
   * Get revocationReason
   * @return revocationReason
   */
  @javax.annotation.Nullable
  public List<RevocationReason> getRevocationReason() {
    return revocationReason;
  }

  public void setRevocationReason(@javax.annotation.Nullable List<RevocationReason> revocationReason) {
    this.revocationReason = revocationReason;
  }


  public SearchCertificateOrder clientReferences(@javax.annotation.Nullable List<String> clientReferences) {
    this.clientReferences = clientReferences;
    return this;
  }

  public SearchCertificateOrder addClientReferencesItem(String clientReferencesItem) {
    if (this.clientReferences == null) {
      this.clientReferences = new ArrayList<>();
    }
    this.clientReferences.add(clientReferencesItem);
    return this;
  }

  /**
   * Client reference UUID
   * @return clientReferences
   */
  @javax.annotation.Nullable
  public List<String> getClientReferences() {
    return clientReferences;
  }

  public void setClientReferences(@javax.annotation.Nullable List<String> clientReferences) {
    this.clientReferences = clientReferences;
  }


  public SearchCertificateOrder startAfter(@javax.annotation.Nullable OffsetDateTime startAfter) {
    this.startAfter = startAfter;
    return this;
  }

  /**
   * Certificate Order not starting after Date
   * @return startAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartAfter() {
    return startAfter;
  }

  public void setStartAfter(@javax.annotation.Nullable OffsetDateTime startAfter) {
    this.startAfter = startAfter;
  }


  public SearchCertificateOrder startBefore(@javax.annotation.Nullable OffsetDateTime startBefore) {
    this.startBefore = startBefore;
    return this;
  }

  /**
   * Certificate Order not starting before Date
   * @return startBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartBefore() {
    return startBefore;
  }

  public void setStartBefore(@javax.annotation.Nullable OffsetDateTime startBefore) {
    this.startBefore = startBefore;
  }


  public SearchCertificateOrder attribute(@javax.annotation.Nullable String attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * Any certificate attribute OID or value with optional wildcard attributes ? and/or *
   * @return attribute
   */
  @javax.annotation.Nullable
  public String getAttribute() {
    return attribute;
  }

  public void setAttribute(@javax.annotation.Nullable String attribute) {
    this.attribute = attribute;
  }


  public SearchCertificateOrder includeCertificateChain(@javax.annotation.Nullable Boolean includeCertificateChain) {
    this.includeCertificateChain = includeCertificateChain;
    return this;
  }

  /**
   * Include the certificate chain in the certificate order when available
   * @return includeCertificateChain
   */
  @javax.annotation.Nullable
  public Boolean getIncludeCertificateChain() {
    return includeCertificateChain;
  }

  public void setIncludeCertificateChain(@javax.annotation.Nullable Boolean includeCertificateChain) {
    this.includeCertificateChain = includeCertificateChain;
  }


  public SearchCertificateOrder tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SearchCertificateOrder addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Customer label/tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCertificateOrder searchCertificateOrder = (SearchCertificateOrder) o;
    return Objects.equals(this.orderReference, searchCertificateOrder.orderReference) &&
        Objects.equals(this.serialNumber, searchCertificateOrder.serialNumber) &&
        Objects.equals(this.orderStatus, searchCertificateOrder.orderStatus) &&
        Objects.equals(this.revocationReason, searchCertificateOrder.revocationReason) &&
        Objects.equals(this.clientReferences, searchCertificateOrder.clientReferences) &&
        Objects.equals(this.startAfter, searchCertificateOrder.startAfter) &&
        Objects.equals(this.startBefore, searchCertificateOrder.startBefore) &&
        Objects.equals(this.attribute, searchCertificateOrder.attribute) &&
        Objects.equals(this.includeCertificateChain, searchCertificateOrder.includeCertificateChain) &&
        Objects.equals(this.tags, searchCertificateOrder.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderReference, serialNumber, orderStatus, revocationReason, clientReferences, startAfter, startBefore, attribute, includeCertificateChain, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCertificateOrder {\n");
    sb.append("    orderReference: ").append(toIndentedString(orderReference)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("    revocationReason: ").append(toIndentedString(revocationReason)).append("\n");
    sb.append("    clientReferences: ").append(toIndentedString(clientReferences)).append("\n");
    sb.append("    startAfter: ").append(toIndentedString(startAfter)).append("\n");
    sb.append("    startBefore: ").append(toIndentedString(startBefore)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    includeCertificateChain: ").append(toIndentedString(includeCertificateChain)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderReference");
    openapiFields.add("serialNumber");
    openapiFields.add("orderStatus");
    openapiFields.add("revocationReason");
    openapiFields.add("clientReferences");
    openapiFields.add("startAfter");
    openapiFields.add("startBefore");
    openapiFields.add("attribute");
    openapiFields.add("includeCertificateChain");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchCertificateOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchCertificateOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCertificateOrder is not found in the empty JSON string", SearchCertificateOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchCertificateOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCertificateOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("orderReference") != null && !jsonObj.get("orderReference").isJsonNull()) && !jsonObj.get("orderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderReference").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orderStatus") != null && !jsonObj.get("orderStatus").isJsonNull() && !jsonObj.get("orderStatus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderStatus` to be an array in the JSON string but got `%s`", jsonObj.get("orderStatus").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("revocationReason") != null && !jsonObj.get("revocationReason").isJsonNull() && !jsonObj.get("revocationReason").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `revocationReason` to be an array in the JSON string but got `%s`", jsonObj.get("revocationReason").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientReferences") != null && !jsonObj.get("clientReferences").isJsonNull() && !jsonObj.get("clientReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientReferences` to be an array in the JSON string but got `%s`", jsonObj.get("clientReferences").toString()));
      }
      if ((jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull()) && !jsonObj.get("attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCertificateOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCertificateOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCertificateOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCertificateOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCertificateOrder>() {
           @Override
           public void write(JsonWriter out, SearchCertificateOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCertificateOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchCertificateOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchCertificateOrder
   * @throws IOException if the JSON string is invalid with respect to SearchCertificateOrder
   */
  public static SearchCertificateOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCertificateOrder.class);
  }

  /**
   * Convert an instance of SearchCertificateOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

