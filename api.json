{
  "components": {
    "schemas": {
      "ClientDomainValidationStatus": {
        "type": "string",
        "readOnly": true,
        "enum": [
          "PENDING",
          "EXPIRED",
          "VALID",
          "NOT_VALIDATED"
        ],
        "nullable": false,
        "description": "Status of the domain pre validation",
        "example": "not_validated"
      },
      "RevocationRequest": {
        "type": "object",
        "required": [
          "serialNumber",
          "revocationReason",
          "issuerName"
        ],
        "properties": {
          "serialNumber": {
            "type": "string",
            "nullable": false,
            "description": "Certificate serial number (Big Integer HEX encoded)",
            "example": "3893409CB666E1F092B7B6F28E1EAF4582AA7F21"
          },
          "revocationReason": {
            "type": "string",
            "enum": [
              "UNUSED",
              "KEY_COMPROMISE",
              "AFFILIATION_CHANGED",
              "SUPERSEDED",
              "CESSATION_OF_OPERATION"
            ],
            "nullable": false,
            "description": "Revocation reason",
            "example": "CESSATION_OF_OPERATION"
          },
          "issuerName": {
            "type": "string",
            "nullable": false,
            "description": "Certificate issuer distinguished name",
            "example": "DC=COM,DC=Some Domain,OU=Some Organizational Unit,CN=Some SubCA"
          }
        }
      },
      "RequestUPN": {
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": false,
              "description": "User Principal Name entry",
              "example": "upn@sample.org"
            }
          }
        }
      },
      "KeyType": {
        "type": "string",
        "readOnly": true,
        "nullable": false,
        "description": "Key generation type",
        "example": "RSA_2048",
        "enum": [
          "RSA_2048",
          "RSA_3072",
          "RSA_4096",
          "RSA_8192",
          "EC_secp224k1",
          "EC_secp224r1",
          "EC_secp256k1",
          "EC_secp256r1",
          "EC_secp384r1",
          "EC_secp521r1",
          "EC_x962_p239v1",
          "EC_x962_p239v2",
          "EC_x962_p239v3",
          "EC_brainpool224r1",
          "EC_brainpool256r1",
          "EC_brainpool320r1",
          "EC_brainpool384r1",
          "EC_brainpool512r1",
          "EC_frp256v1"
        ]
      },
      "DNS": {
        "type": "object",
        "required": [
          "dns"
        ],
        "properties": {
          "dns": {
            "type": "string",
            "nullable": false,
            "description": "requested domain name (gets converted to punycode if required)",
            "example": "support.sample.org"
          },
          "includeBaseDomainForWildcard": {
            "type": "boolean",
            "nullable": false,
            "description": "Append base domain to wildcard DNS.\nAdds sample.org when *.sample.org is requested.\nApplies only to certificate policies which allow wildcard issuance.\nThis flag has no effect if the certificate policy does not include the wildcard option.\n",
            "example": true
          },
          "includeWWWDomain": {
            "type": "boolean",
            "nullable": false,
            "description": "Append www to requested DNS. \nAdds www.sample.org when sample.org is requested.\nWhen enabled, www is prefixed to all requested DNS.\n",
            "example": true
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "uuid",
          "name",
          "keyGenerationType",
          "keyType",
          "issuanceNotification",
          "revocationNotification",
          "authorization",
          "renewalRule",
          "publishCertificate",
          "clientPublishCertificateOverride",
          "clientPublishCertificateOverrideDefault",
          "allowAdditionalIssuanceNotificationRecipients",
          "allowAdditionalRevocationNotificationRecipients",
          "allowAdditionalRenewalNotificationRecipients",
          "allowAdditionalAuthorizationNotificationRecipients",
          "allowAdditionalAuthorizationAcceptedNotificationRecipients",
          "allowAdditionalAuthorizationRejectedNotificationRecipients",
          "isCABDNSValidationRequired",
          "allowAdditionalCABDNSNotificationRecipients",
          "isCABDNSEmailLinkValidationRequired",
          "isEmailBoxValidationRequired",
          "requiresRegistrationDocuments",
          "requiresRegistrationDocumentsOnRegister",
          "allowRegistrationDocumentsPDF",
          "allowRegistrationDocumentsJPG",
          "isGenerateRevocationCode"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "pma-[0-9a-f-]{36}",
            "readOnly": true,
            "nullable": false,
            "description": "Product UUID reference",
            "example": "pma-123e4567-e89b-12d3-a456-426614174000"
          },
          "productName": {
            "type": "string",
            "readOnly": true,
            "nullable": false,
            "description": "Certificate product name",
            "example": "SSL Silver"
          },
          "productDescription": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Product additional description",
            "example": "SSL NCP policy with domain validation"
          },
          "keyGenerationType": {
            "type": "string",
            "enum": [
              "PKCS10",
              "PKCS12",
              "PKCS12withPIN",
              "PKCS12withCAPIN",
              "PKCS10or12withPIN",
              "PKCS10or12withCAPIN",
              "HSM",
              "CNG"
            ],
            "readOnly": true,
            "nullable": false,
            "description": "Key generation protocol",
            "example": "PKCS10"
          },
          "keyType": {
            "$ref": "#/components/schemas/KeyType"
          },
          "issuanceNotification": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate sends a notification on issuance",
            "example": true
          },
          "revocationNotification": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate sends a notification on revocation",
            "example": true
          },
          "authorization": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate requires an authorization on issuance/revocation",
            "example": true
          },
          "renewalRule": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate sends a notification for renewal",
            "example": true
          },
          "publishCertificate": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate is published to the public LDAP after issuance",
            "example": true
          },
          "clientPublishCertificateOverride": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate if the certificate publication can be overridden",
            "example": true
          },
          "clientPublishCertificateOverrideDefault": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicate the default value if publication override is enabled",
            "example": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true,
            "description": "Indicate if the certificate product has an expiration date",
            "example": "2022-02-15"
          },
          "allowAdditionalIssuanceNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional certificate issuance notification recipients can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "allowAdditionalRevocationNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional certificate revocation notification recipients can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "allowAdditionalRenewalNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional certificate renewal notification recipients can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "allowAdditionalAuthorizationNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional authorization notification recipients can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "allowAdditionalAuthorizationAcceptedNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional authorization notification recipients (for accepted requests) can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "allowAdditionalAuthorizationRejectedNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, additional authorization notification recipients (for rejected requests) can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "isCABDNSValidationRequired": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, indicates CAB DNS or HTTP domain validation is required.",
            "example": true
          },
          "allowAdditionalCABDNSNotificationRecipients": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, indicates that additional notification recipients can be added to the certificate order. Additional recipients are skipped when disabled.",
            "example": true
          },
          "isCABDNSEmailLinkValidationRequired": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, indicates CAB DNS via constructed email link to domain owner is required.",
            "example": true
          },
          "isEmailBoxValidationRequired": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, indicates that the recipient must validate the email box via a link.",
            "example": true
          },
          "requiresRegistrationDocuments": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, registration documents must provided with the certificate order. Documents are skipped when disabled.",
            "example": true
          },
          "requiresRegistrationDocumentsOnRegister": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "When enabled, registration documents must provided when submitting the certificate order. When disabled, documents can be added to the certificate order at a later time via the RA UI.",
            "example": true
          },
          "allowRegistrationDocumentsPDF": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "PDF registration document are allowed.",
            "example": true
          },
          "allowRegistrationDocumentsJPG": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "JPG/PNG registration images are allowed.",
            "example": true
          },
          "isGenerateRevocationCode": {
            "type": "boolean",
            "readOnly": true,
            "nullable": false,
            "description": "Indicates if a revocation code is issued for the recipient (link to self service revocation).",
            "example": true
          },
          "productValidity": {
            "$ref": "#/components/schemas/ProductValidity",
            "readOnly": true,
            "nullable": true,
            "description": "Optional certificate validity when editable in the certificate policy template"
          }
        }
      },
      "RequestRFC822": {
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": false,
              "description": "RFC822 entry",
              "example": "sample@sample.org"
            }
          }
        }
      },
      "CertificateOrderStatus": {
        "type": "string",
        "readOnly": true,
        "enum": [
          "NEW",
          "KEY_VALIDATION",
          "PRE_VALIDATION",
          "GENERATE_TBS",
          "PENDING_AUTH",
          "PRE_ISSUE",
          "ISSUE",
          "POST_VALIDATION",
          "FINALIZE_ISSUANCE",
          "ISSUED",
          "REVOKED",
          "FAILED",
          "REJECTED",
          "PENDING_CSR_RENEWAL",
          "UNKNOWN"
        ],
        "nullable": false,
        "description": "Status of the certificate Order",
        "example": "ISSUED"
      },
      "SearchCertificateOrder": {
        "type": "object",
        "properties": {
          "orderReference": {
            "type": "string",
            "pattern": "ord-[0-9a-f-]{36}",
            "nullable": true,
            "description": "Certificate Order reference",
            "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
          },
          "serialNumber": {
            "type": "string",
            "nullable": true,
            "description": "Certificate serial number (Big Integer HEX encoded) with optional wildcard attributes ? and/or *",
            "example": "3893409CB*66E1F09?"
          },
          "orderStatus": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CertificateOrderStatus"
            }
          },
          "revocationReason": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RevocationReason"
            }
          },
          "clientReferences": {
            "type": "array",
            "nullable": true,
            "description": "Client reference UUID",
            "example": [
              "cli-123e4567-e89b-12d3-a456-426614174000"
            ],
            "items": {
              "type": "string",
              "pattern": "cli-[0-9a-f-]{36}"
            }
          },
          "startAfter": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "description": "Certificate Order not starting after Date",
            "example": "2018-03-20"
          },
          "startBefore": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "description": "Certificate Order not starting before Date",
            "example": "2018-03-25"
          },
          "attribute": {
            "type": "string",
            "nullable": true,
            "description": "Any certificate attribute OID or value with optional wildcard attributes ? and/or *",
            "example": "s?me@emai* or 2.5.4.r or street"
          }
        }
      },
      "ClientDNS": {
        "type": "object",
        "required": [
          "uuid",
          "createdOn",
          "domain",
          "domainUnicode",
          "validated",
          "trustedDomain",
          "validationMethod",
          "expired",
          "randomValueTimeExpired"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "cld-[0-9a-f-]{36}",
            "nullable": false,
            "readOnly": true,
            "description": "Pre validated client domain reference",
            "example": "cld-10877aec-412f-4b96-a5d4-f5f95da8634e"
          },
          "domain": {
            "type": "string",
            "nullable": false,
            "description": "Client domain in punycode",
            "example": "xn--dj-kia8a.vu.com"
          },
          "domainUnicode": {
            "type": "string",
            "nullable": false,
            "readOnly": true,
            "description": "Client domain in unicode",
            "example": "déjà.vu.com"
          },
          "validated": {
            "type": "boolean",
            "nullable": false,
            "readOnly": true,
            "description": "Indicates if the domain is validated",
            "example": true
          },
          "trustedDomain": {
            "type": "boolean",
            "nullable": false,
            "readOnly": false,
            "description": "Indicates if the domain is a trusted domain (for private PKIs). This setting is linked to the certificate product DNS validation rule for Private PKIs.",
            "example": true
          },
          "timeValidated": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "description": "Indicates when the domain got validated",
            "example": "2022-01-12T23:20:50.52Z"
          },
          "validationMethod": {
            "type": "string",
            "nullable": false,
            "readOnly": true,
            "description": "DNS validation type",
            "example": "cabdns"
          },
          "randomValue": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "The random value to add to the DNS TXT record for the domain",
            "example": ""
          },
          "randomValueTimeCreated": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Indicates when the random value was created",
            "example": "2022-01-12T23:20:50.52Z"
          },
          "randomValueTimeExpire": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Indicates when the random value expires",
            "example": "2022-01-12T23:20:50.52Z"
          },
          "validationResult": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "Indicates the validation result",
            "example": "Validated XYZ ..."
          },
          "timeExpired": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "description": "Indicates when the random value was created",
            "example": "2022-01-12T23:20:50.52Z"
          },
          "expired": {
            "type": "boolean",
            "nullable": false,
            "readOnly": true,
            "description": "Indicates if the pre validation of the domain has expired",
            "example": false
          },
          "randomValueTimeExpired": {
            "type": "boolean",
            "nullable": false,
            "readOnly": true,
            "description": "Indicates if the random value is expired",
            "example": false
          },
          "status": {
            "$ref": "#/components/schemas/ClientDomainValidationStatus"
          }
        }
      },
      "JobStatus": {
        "type": "string",
        "readOnly": true,
        "enum": [
          "WAITING",
          "PENDING",
          "PROCESSING",
          "SUCCESS",
          "FAILED",
          "SCHEDULE_REQUEST",
          "SCHEDULE_RESPONSE",
          "RETRY",
          "CONNECTION_OR_CHANNEL_CLOSED",
          "UNKNOWN"
        ],
        "nullable": false,
        "description": "Status of the certificate Order Task",
        "example": "SUCCESS"
      },
      "IssueRequest": {
        "type": "object",
        "required": [
          "productReference"
        ],
        "properties": {
          "productReference": {
            "type": "string",
            "pattern": "pma-[0-9a-f-]{36}",
            "nullable": false,
            "description": "Product reference",
            "example": "pma-10877aec-412f-4b96-a5d4-f5f95da8634e"
          },
          "csr": {
            "type": "string",
            "nullable": true,
            "description": "CSR PEM encoded with or without ----BEGIN/END CERTIFICATE REQUEST-----. When null, a key-pair is generated if the certificate policy allows it (SubjectDN and optional overrides must be provided where necessary).",
            "example": "----BEGIN CERTIFICATE REQUEST-----\nMIICijCCAXICAQAwGTEXMBUGA1UEAwwOd3d3LnNhbXBsZS5vcmcwggEiMA0GCSqG\nSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCY6+oWhcAadQJ3kuNHZIbujX6yt11MN7RN\nYIf1+tCFK/zHlbrekiochGQXHasbbTcAqVPM+atvvPl5BMQO6BW8/RzpKC05WAQL\nwM580Qnq7WcOUX+h+tU6v0W/mRF0KyEt2eI7W+J1ec27AYS2SMeDVyVN/dY7Ca8o\nx+glgw6MRjh4EQyk9E6v0BU5DaHqvUEhFArloW/t3XCps2Oxd15gqjm0tuEzaXul\n6VOM4e7CjQuapG1D4mD6TZwEl9A26eVROiRbsgWMCjSYOrCDxsel873kDJoYv+8E\nYxbAxFlzg7RVBI0Th3vUAgawaPjMz7q2xOOYv+L64fI4s0WQFbbrAgMBAAGgLDAq\nBgkqhkiG9w0BCQ4xHTAbMBkGA1UdEQQSMBCCDnd3dy5zYW1wbGUub3JnMA0GCSqG\nSIb3DQEBCwUAA4IBAQAzegZ0PvLM22mie5eolWC9VHH00s3eazvYYpvzecsfDr9k\no8omcsfZVE679R7WmAmicPLC8NYMTPGQHStu3MKyxAzw/GHvi2C1BSBx3lx0WDno\nJh02r5J/qurxGTZihSr9GnUAU1I3Ht5Lboz/ITEslNMOzZFFIm7e2knfqchhyQRS\nilT3LgHWAc490z/lWg63IbC4DVfl5SRtupKjFixyJKU7rHnkBb9fwBGn/mcQPcvq\ng9W5jRRvcCfmufSdtuzkuvVTR7AcqzrlAFhmwMv1Yll2eMv2qD40jjb0sF45bcu0\nCRg0mu4um+/DZaWV6IUOiTPj6wewH+909Ov8f2G+\n----END CERTIFICATE REQUEST-----\n"
          },
          "overrides": {
            "$ref": "#/components/schemas/RequestOverrides"
          },
          "additionalRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalRecipient"
            }
          },
          "registrationDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegistrationDocument"
            }
          },
          "note": {
            "type": "string",
            "nullable": true,
            "description": "User note added to issued certificate order",
            "example": "user free text"
          },
          "publishCertificate": {
            "type": "boolean",
            "nullable": false,
            "description": "Publish certificate to repository.\nPublication occurs if option is enabled on certificate policy or if the account\nhas the option enabled to override the publication.\n"
          },
          "synchrone": {
            "type": "boolean",
            "default": false,
            "nullable": false,
            "description": "Request is sent asynchronously to the backend by default. \nSetting this value to _true_ will wait until the certificate is issued and return the completed certificate order.\nFor successful synchrone issuance, _insure_ that you have all prerequisites for DNS validation and/or Authorization fulfilled.\n",
            "example": true
          },
          "acceptTandC": {
            "type": "boolean",
            "default": true,
            "nullable": false,
            "description": "When server backend has T&C enabled, this value is checked.\n",
            "example": true
          }
        }
      },
      "RequestOverrides": {
        "type": "object",
        "properties": {
          "subjectDN": {
            "type": "string",
            "nullable": true,
            "description": "Override the CSR Subject Distinguished Name with user provided value\nSupported attributes are (lower or uppercase):\n  - c, country (Country)\n  - o, organization (Organization)\n  - ou, organizationalUnit (Organizational Unit)\n  - t, title (Title) \n  - cn, commonName (Common Name)\n  - sn, surName (Surname)\n  - gn, givenName (Given name)\n  - i, initials (Initials)\n  - street, streetAddress (Street Address)\n  - serialnumber (Serial number)\n  - l, locality (Locality)\n  - st, state (State)\n  - e, email, emailAddress (Email)\n  - dc, domainController (Domain Controller)\n  - uid (UID)\n  - generationQualifier, generation (Generation Qualifier)\n  - description (Description)\n  - role (Role)\n  - joil (Jurisdiction of Incorporation, Locality)\n  - joist (Jurisdiction of Incorporation, State)\n  - joic (Jurisdiction of Incorporation, Country)\n  - orgId, organizationIdentifier (Organization Identifier)\n  - uniqueIdentifier (Unique Identifier)\n  - name (Name)\n  - pseudonym (Pseudonym)\n  - postalAddress (Postal Address)\n  - postalCode (Postal Code)\n  - unstructuredaddress (Unstructed Address)\n  - unstructuredname (Unstructed Name)\n  - dn (DN Qualifier)\n  - nameatbirth (Name at Birth)\n  - countryofcitizenship (Country of Citizenship)\n  - countryofresidence (Country of Residence)\n  - gender (Gender)\n  - placeofbirth (Place of Birth)\n  - dateofbirth (Date of Birth)\n  - businesscategory (Business Category)\n  - telephonenumber (Telephone Number)\n  - scionisdasnumber (SCION ISD AS Number)\n  - tpmmanufacturer (TPM Manufacturer)\n  - tpmmodel (TPM Model)\n  - tpmversion (TPM Version)\n",
            "example": "c=US,l=Denver,o=Acme Ltd,cn=Sample"
          },
          "validity": {
            "type": "integer",
            "nullable": true,
            "minimum": 1,
            "description": "Optional certificate validity set if enabled on the Product\n",
            "example": 1
          },
          "requestExtensions": {
            "$ref": "#/components/schemas/RequestExtensions"
          }
        }
      },
      "CertificateOrder": {
        "type": "object",
        "required": [
          "uuid",
          "createdOn",
          "status",
          "clientReference",
          "productReference"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "ord-[0-9a-f-]{36}",
            "nullable": false,
            "description": "Certificate Order reference",
            "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "description": "Certificate Order creation date time",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "status": {
            "$ref": "#/components/schemas/CertificateOrderStatus"
          },
          "clientReference": {
            "type": "string",
            "pattern": "cli-[0-9a-f-]{36}",
            "nullable": false,
            "readOnly": true,
            "description": "Client reference UUID",
            "example": "cli-123e4567-e89b-12d3-a456-426614174000"
          },
          "productReference": {
            "type": "string",
            "pattern": "pma-[0-9a-f-]{36}",
            "nullable": false,
            "readOnly": true,
            "description": "Product reference UUID",
            "example": "pma-123e4567-e89b-12d3-a456-426614174000"
          },
          "certificate": {
            "readOnly": true,
            "nullable": true,
            "description": "Certificate reference",
            "$ref": "#/components/schemas/Certificate"
          },
          "additionalRecipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalRecipient"
            }
          },
          "issuedBy": {
            "type": "string",
            "format": "email",
            "readOnly": true,
            "nullable": false,
            "description": "email of the person who created the order",
            "example": "some@email.org"
          }
        }
      },
      "CertificateOrderTask": {
        "type": "object",
        "required": [
          "uuid",
          "timeCreated",
          "timeScheduled",
          "numberOfExecutions",
          "status",
          "type"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "job-[0-9a-f-]{36}",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate Order Task reference",
            "example": "job-f0725b50-c533-4802-a844-de57bfb7a80e"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate Order creation date time",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "timeScheduled": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Scheduled date time",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "timeStarted": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "description": "Started date time",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "timeFinished": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "description": "Finished date time",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "type": {
            "$ref": "#/components/schemas/JobType"
          },
          "numberOfExecutions": {
            "type": "integer",
            "nullable": false,
            "readOnly": true,
            "description": "Number of executions",
            "example": 2
          },
          "response": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "Response",
            "example": "Processed successfully"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "description": "Error message",
            "example": "Error processing xyz ..."
          }
        }
      },
      "RegistrationDocument": {
        "type": "object",
        "required": [
          "documentName",
          "document"
        ],
        "properties": {
          "documentName": {
            "type": "string",
            "nullable": false,
            "description": "document name",
            "example": "my_document.pdf"
          },
          "document": {
            "type": "string",
            "nullable": false,
            "description": "Base64 encoded byte array of the document content"
          }
        }
      },
      "RevocationStatus": {
        "type": "object",
        "required": [
          "revokedOn",
          "reason",
          "revokedBy"
        ],
        "properties": {
          "revokedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Revocation date in UTC",
            "example": "2022-02-12T05:10:50.52Z"
          },
          "reason": {
            "$ref": "#/components/schemas/RevocationReason"
          },
          "revokedBy": {
            "type": "string",
            "format": "email",
            "readOnly": true,
            "nullable": false,
            "description": "email of the person who revoked the certificate",
            "example": "some@email.org"
          }
        }
      },
      "APIError": {
        "type": "object",
        "required": [
          "uuid",
          "errorCode",
          "errorMessages"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "nullable": false,
            "description": "end user error UUID reference",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "errorCode": {
            "type": "string",
            "readOnly": true,
            "nullable": false,
            "description": "Error code",
            "example": "<000.000.0000>"
          },
          "errorMessages": {
            "type": "array",
            "items": {
              "type": "string",
              "readOnly": true,
              "nullable": false,
              "description": "Error message",
              "example": "Invalid identifier for product xyz"
            }
          }
        }
      },
      "Client": {
        "type": "object",
        "required": [
          "uuid",
          "name"
        ],
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "cli-[0-9a-f-]{36}",
            "readOnly": true,
            "nullable": false,
            "description": "Client UUID reference",
            "example": "cli-123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": false,
            "description": "Client name",
            "example": "Company XYZ"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Client description",
            "example": "Some information about Company XYZ"
          },
          "products": {
            "description": "List of available certificate products",
            "readOnly": true,
            "nullable": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "RevocationReason": {
        "type": "string",
        "enum": [
          "UNUSED",
          "KEY_COMPROMISE",
          "C_A_COMPROMISE",
          "AFFILIATION_CHANGED",
          "SUPERSEDED",
          "CESSATION_OF_OPERATION",
          "CERTIFICATE_HOLD",
          "REMOVE_FROM_CRL",
          "PRIVILEGE_WITHDRAWN",
          "A_A_COMPROMISE"
        ],
        "nullable": false,
        "readOnly": true,
        "description": "Revocation reason",
        "example": "SUPERSEDED"
      },
      "AdditionalRecipientType": {
        "type": "string",
        "readOnly": true,
        "nullable": false,
        "description": "Notification type for additional recipient.\n  - DNS_OWNER_CHECK_EMAIL_LINK: send notification for DNS validation (email link) to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - DNS_CAB: send notification for CAB DNS change or CAB Agreed upon to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - ISSUANCE: send notification for certificate issuance to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - REVOCATION: send notification for certificate revocation to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - RENEWAL: send notification for certificate renewal to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - RECOVERY: send notification for key recovery to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - ISSUANCE_AUTHORIZATION: send notification for certificate issuance authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - ISSUANCE_AUTHORIZATION_ACCEPTED: send notification for accepted certificate issuance authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - ISSUANCE_AUTHORIZATION_REJECTED: send notification for rejected certificate issuance authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n",
        "example": "DNS_OWNER_CHECK_EMAIL_LINK",
        "enum": [
          "DNS_OWNER_CHECK_EMAIL_LINK",
          "DNS_CAB",
          "ISSUANCE",
          "REVOCATION",
          "RENEWAL",
          "RECOVERY",
          "ISSUANCE_AUTHORIZATION",
          "ISSUANCE_AUTHORIZATION_ACCEPTED",
          "ISSUANCE_AUTHORIZATION_REJECTED"
        ]
      },
      "RequestExtensions": {
        "type": "object",
        "properties": {
          "microsoftSecurityIdentifier": {
            "type": "string",
            "nullable": true,
            "description": "Microsoft Security Identifier (SID)\nOverride or add the X.509 extension is present in the certificate policy\n",
            "example": "S-1-5-32"
          },
          "microsoftPolicyTemplateOID": {
            "type": "string",
            "nullable": true,
            "description": "Microsoft Policy Template Object Identifier.\nOverride or add the X.509 extension is present in the certificate policy\n",
            "example": "2.16.756.3.2.1.0"
          },
          "requestDNS": {
            "$ref": "#/components/schemas/RequestDNS"
          },
          "requestRFC822": {
            "$ref": "#/components/schemas/RequestRFC822"
          },
          "requestUPN": {
            "$ref": "#/components/schemas/RequestUPN"
          }
        }
      },
      "JobType": {
        "type": "string",
        "readOnly": true,
        "enum": [
          "ISSUE_SUBMIT_CERTIFICATE_ORDER_JOB",
          "ISSUE_CERTIFICATE_RENEWAL_VALIDATION_JOB",
          "ISSUE_KEY_VALIDATION_JOB",
          "ISSUE_PRE_VALIDATION_JOB",
          "ISSUE_GENERATE_TBS_JOB",
          "ISSUE_POLICY_VALIDATION_JOB",
          "ISSUE_CAA_CHECK_VALIDATION_JOB",
          "ISSUE_DOMAIN_OWNER_CHECK_VALIDATION_JOB",
          "ISSUE_END_USER_EMAIL_VALIDATION_JOB",
          "ISSUE_PRE_LINTING_JOB",
          "ISSUE_PRE_ISSUE_CERTIFICATE_JOB",
          "ISSUE_CT_LOG_PRE_CERT_PUBLICATION_JOB",
          "ISSUE_ISSUE_CERTIFICATE_JOB",
          "ISSUE_ISSUE_SWS_CERTIFICATE_JOB",
          "ISSUE_POST_ISSUE_CERTIFICATE_JOB",
          "ISSUE_FINALIZE_ISSUE_CERTIFICATE_JOB",
          "ISSUE_POST_LINTING_CERTIFICATE_JOB",
          "ISSUE_CT_LOG_PUBLICATION_JOB",
          "ISSUE_AUTHORIZATION_JOB",
          "ISSUE_NOTIFY_ISSUED_JOB",
          "ISSUE_NOTIFY_RENEWAL_JOB",
          "ISSUE_UPDATE_RENEWAL_JOB",
          "ISSUE_REVOKE_RENEWED_CERTIFICATE_JOB",
          "ISSUE_NOTIFY_P12_RETRIEVAL_JOB",
          "ISSUE_NOTIFY_HSM_RETRIEVAL_JOB",
          "ISSUE_SET_P12_PIN_JOB",
          "ISSUE_SEND_P12_PIN_JOB",
          "PUBLISH_POST_CERTIFICATE_JOB",
          "REVOKE_CERTIFICATE_JOB",
          "PUBLISH_CERTIFICATE_ORDER_JOB",
          "RA_AUTHORIZE_CERT_REVOKE_JOB",
          "RA_NOTIFY_AUTHORIZE_CERT_REVOKE_JOB",
          "SEND_EMAIL_JOB",
          "RESEND_END_USER_SELF_SERVICE_VALIDATION_EMAIL_JOB",
          "REVOKE_SWS_CERTIFICATE_JOB",
          "MANUAL_PUBLISH_CERTIFICATE_JOB",
          "MANUAL_UNPUBLISH_CERTIFICATE_JOB",
          "SCEP_PKI_OPERATION_JOB",
          "MICROSOFT_CES_REQUEST_JOB",
          "MICROSOFT_CES_STATUS_JOB",
          "MICROSOFT_ENROLMENT_POLICIES_JOB",
          "MICROSOFT_CES_QUERY_STATUS_JOB",
          "MICROSOFT_CES_UNKNOWN_JOB",
          "SNOW_REVOKE_ALL_CLIENT_CERTIFICATES_JOB",
          "SNOW_REVOKE_ALL_POLICY_MAPPING_CERTIFICATES_JOB"
        ],
        "nullable": false,
        "description": "Certificate Order Task Type",
        "example": "ISSUE_FINALIZE_ISSUE_CERTIFICATE_JOB"
      },
      "ProductValidity": {
        "type": "object",
        "required": [
          "validityType"
        ],
        "properties": {
          "validityType": {
            "type": "string",
            "readOnly": true,
            "nullable": false,
            "description": "Certificate validity types.\n  - YEARS: certificate validity in years.\n  - MONTHS: certificate validity in months.\n  - DAYS: certificate validity in days.\n  - HOURS: certificate validity in hours.\n  - MINUTES: certificate validity in minutes.\n  - SECONDS: certificate validity in seconds.\n",
            "example": "HOURS",
            "enum": [
              "YEARS",
              "MONTHS",
              "DAYS",
              "HOURS",
              "MINUTES",
              "SECONDS"
            ]
          },
          "validity": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "The default certificate validity",
            "example": 1
          },
          "validityOptions": {
            "type": "array",
            "nullable": false,
            "readOnly": true,
            "description": "Optional certificate validity values",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "RequestDNS": {
        "type": "object",
        "required": [
          "dnsList"
        ],
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DNS"
            }
          }
        }
      },
      "Certificate": {
        "type": "object",
        "required": [
          "subject",
          "issuer",
          "serial",
          "startValidity",
          "endValidity",
          "certificate"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate Subject Distinguished Name",
            "example": "DC=COM,DC=Domain,OU=Some Organizational Unit,CN=Some Name"
          },
          "issuer": {
            "type": "string",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate Issuer Distinguished Name",
            "example": "DC=COM,DC=Domain,OU=Some Organizational Unit,CN=Issuer Name"
          },
          "serial": {
            "type": "string",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate serial number (Big Integer HEX encoded)",
            "example": "3893409CB666E1F092B7B6F28E1EAF4582AA7F21"
          },
          "startValidity": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate start validity in UTC",
            "example": "2022-01-12T23:20:50.52Z"
          },
          "endValidity": {
            "type": "string",
            "format": "date-time",
            "nullable": false,
            "readOnly": true,
            "description": "Certificate start validity in UTC",
            "example": "2023-01-12T23:20:50.52Z"
          },
          "certificate": {
            "type": "string",
            "readOnly": true,
            "nullable": false,
            "description": "base64 encoded DER certificate",
            "example": "... [snipped] ... dGhpcyBpcyBhbiBleGFtcGxl ... [snipped] ..."
          },
          "revocationStatus": {
            "readOnly": true,
            "nullable": true,
            "description": "Certificate revocation",
            "$ref": "#/components/schemas/RevocationStatus"
          }
        }
      },
      "AdditionalRecipient": {
        "type": "object",
        "required": [
          "email",
          "recipientType",
          "language"
        ],
        "properties": {
          "email": {
            "type": "string",
            "nullable": false,
            "description": "RFC822 email",
            "example": "shared.mailbox@sample.org"
          },
          "recipientType": {
            "type": "string",
            "nullable": false,
            "description": "Notification type for additional recipient.\n  - DNS_OWNER_CHECK_EMAIL_LINK: send notification for DNS validation (email link) to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - DNS_CAB: send notification for CAB DNS change or CAB Agreed upon to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - ISSUANCE: send notification for certificate issuance to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - REVOCATION: send notification for certificate revocation to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - RENEWAL: send notification for certificate renewal to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - RECOVERY: send notification for key recovery to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - AUTHORIZATION: send notification for authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - AUTHORIZATION_ACCEPTED: send notification for accepted authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n  - AUTHORIZATION_REJECTED: send notification for issuance authorization to additional recipient. Requires notification enabled for 'Additional recipient' on notification template.\n",
            "example": "DNS_OWNER_CHECK_EMAIL_LINK",
            "enum": [
              "DNS_OWNER_CHECK_EMAIL_LINK",
              "DNS_CAB",
              "ISSUANCE",
              "REVOCATION",
              "RENEWAL",
              "RECOVERY",
              "AUTHORIZATION",
              "AUTHORIZATION_ACCEPTED",
              "AUTHORIZATION_REJECTED"
            ]
          },
          "language": {
            "type": "string",
            "nullable": false,
            "description": "Notification language for additional recipient.\nThe NEUTRAL type is the default notification is no notification with type of DE, FR or EN is defined.\nThis is usually a notification which contains a message in three languages.\n",
            "example": "NEUTRAL",
            "enum": [
              "NEUTRAL",
              "EN",
              "FR",
              "DE"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.ra.pre.swisssign.ch",
      "description": "Pre Production"
    },
    {
      "url": "https://api.ra.swisssign.ch",
      "description": "Production"
    }
  ],
  "openapi": "3.0.0",
  "paths": {
    "/v2/jwt/{userName}": {
      "post": {
        "operationId": "jwt",
        "tags": [
          "api_registration"
        ],
        "summary": "Produce a user JWT",
        "description": "Helper service to generate a JWT derived from you login username and API Key\n---\n* Use the generated JWT in the header of __each__ HTTP request to the service\n\n`Authorization: Bearer <encoded JWT>`\n",
        "requestBody": {
          "description": "User Secret payload",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "userSecret": {
                    "type": "string"
                  }
                },
                "required": [
                  "userSecret"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/v2/clients": {
      "post": {
        "operationId": "searchClients",
        "tags": [
          "api_registration"
        ],
        "summary": "Search Clients available to the RA Operator",
        "description": "Search for clients for which the RA Operator can issue, revoke or pre validate DNS entries.\nThe Client information includes the list of assigned certificate products.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string",
              "description": "search query string with optional wildcard attributes ? and/or *",
              "example": "C?mpan* Ltd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/Client"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/{clientReference}": {
      "post": {
        "operationId": "getClient",
        "tags": [
          "api_registration"
        ],
        "summary": "Get a client given its reference Id",
        "description": "Get a client given its reference UUID\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cli-[0-9a-f-]{36}",
              "description": "Client reference UUID",
              "type": "string",
              "example": "cli-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "clientReference",
            "description": "Client reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/issue/csr/{productReference}": {
      "post": {
        "operationId": "issueCertificate",
        "tags": [
          "api_registration"
        ],
        "summary": "Issue certificate using CSR",
        "description": "Issue a certificate based on the Product reference (CSR)\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "pma-[0-9a-f-]{36}",
              "description": "Product reference UUID",
              "type": "string",
              "example": "pma-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "productReference",
            "description": "Certificate product reference UUID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Certificate Request in Base64 with start/end beacon",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              },
              "example": "----BEGIN CERTIFICATE REQUEST-----\nMIIBQDCByAIBADBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEh\n... [snipped] ...\n6EYCyy3DWH2/ZTmKYjcaCE/iuOigqJOtgRyIeufDV9HKF4UP\n-----END CERTIFICATE REQUEST-----\n"
            },
            "application/json": {
              "schema": {
                "type": "string"
              },
              "example": "----BEGIN CERTIFICATE REQUEST-----\nMIIBQDCByAIBADBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEh\n... [snipped] ...\n6EYCyy3DWH2/ZTmKYjcaCE/iuOigqJOtgRyIeufDV9HKF4UP\n-----END CERTIFICATE REQUEST-----\n"
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateOrder"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/issue": {
      "post": {
        "operationId": "issueCertificateV22",
        "tags": [
          "api_registration"
        ],
        "summary": "Issue certificate using extended request attributes",
        "description": "Issue a certificate based on the Product reference with extended attributes and CSR\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Issue Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateOrder"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/status": {
      "post": {
        "operationId": "getCertificateOrderStatus",
        "tags": [
          "api_registration"
        ],
        "summary": "Retrieve a Certificate Order status given the Order reference",
        "description": "Retrieve a certificate order status given the order reference identifier.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateOrderStatus"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}": {
      "post": {
        "operationId": "getCertificateOrder",
        "tags": [
          "api_registration"
        ],
        "summary": "Retrieve a Certificate Order given the Order reference",
        "description": "Retrieve a certificate order given the order reference identifier.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateOrder"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/certificate/chain": {
      "post": {
        "operationId": "getCertificateChain",
        "tags": [
          "api_registration"
        ],
        "summary": "Retrieve the certificate chain for the given Order reference",
        "description": "Retrieve the certificate chain base64 encoded text. First element in list is leaf certificate, last element is Root certificate.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/tasks": {
      "post": {
        "operationId": "getCertificateOrderTasks",
        "tags": [
          "api_registration"
        ],
        "summary": "Retrieve a Certificate Order Tasks given the Order reference",
        "description": "Retrieve a certificate order tasks given the order reference identifier.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/CertificateOrderTask"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/orders": {
      "post": {
        "operationId": "getCertificateOrders",
        "tags": [
          "api_registration"
        ],
        "summary": "Search Certificate Orders",
        "description": "Search for Certificate Orders given search parameters\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Certificate order search options",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCertificateOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/CertificateOrder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/revoke": {
      "post": {
        "operationId": "revokeCertificates",
        "tags": [
          "api_registration"
        ],
        "summary": "Revoke certificates",
        "description": "Revoke one or more certificates\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Certificate references to revoke",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RevocationRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "successfully submitted revocation request"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{clientReference}/list": {
      "post": {
        "operationId": "getClientPrevalidatedDomains",
        "tags": [
          "api_registration"
        ],
        "summary": "Get the list of prevalidated domains for the selected client given its reference Id",
        "description": "Retrieve the list of pre validated domains and their status for the selected client\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cli-[0-9a-f-]{36}",
              "description": "Client reference UUID",
              "type": "string",
              "example": "cli-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "clientReference",
            "description": "Client reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/ClientDNS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{clientReference}/register": {
      "post": {
        "operationId": "createClientPrevalidatedDomains",
        "tags": [
          "api_registration"
        ],
        "summary": "Register new prevalidated domains for the selected client given its reference Id",
        "description": "Create and issue domains pre validation tokens for the selected client\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cli-[0-9a-f-]{36}",
              "description": "Client reference UUID",
              "type": "string",
              "example": "cli-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "clientReference",
            "description": "Client reference UUID",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Client domains",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "nullable": false,
                  "description": "Domain name",
                  "example": "déjà.vu.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/ClientDNS"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{prevalidatedDomainReference}": {
      "post": {
        "operationId": "getClientPrevalidatedDomain",
        "tags": [
          "api_registration"
        ],
        "summary": "Get prevalidated domains for the selected domain reference Id",
        "description": "Get pre validatied domain token for the selected identifier\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cld-[0-9a-f-]{36}",
              "description": "Pre validated fomain reference UUID",
              "type": "string",
              "example": "cld-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "prevalidatedDomainReference",
            "description": "Pre validated domain reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDNS"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{prevalidatedDomainReference}/validate": {
      "post": {
        "operationId": "validateClientPrevalidatedDomain",
        "tags": [
          "api_registration"
        ],
        "summary": "Prevalidate domain for the selected domain reference Id",
        "description": "Pre validate domain token for the selected identifier\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cld-[0-9a-f-]{36}",
              "description": "Pre validated fomain reference UUID",
              "type": "string",
              "example": "cld-123e4567-e89b-12d3-a456-426614174000"
            },
            "in": "path",
            "name": "prevalidatedDomainReference",
            "description": "Pre validated domain reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDNS"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{prevalidatedDomainReference}/delete": {
      "post": {
        "operationId": "deleteClientPrevalidatedDomain",
        "tags": [
          "api_registration"
        ],
        "summary": "Delete prevalidated domain for the selected reference Id",
        "description": "Delete pre validated domain\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cld-[0-9a-f-]{36}",
              "description": "Pre validated domain reference UUID",
              "type": "string",
              "example": "cld-2263d498-6569-46d6-9359-f08a1d298d2d"
            },
            "in": "path",
            "name": "prevalidatedDomainReference",
            "description": "Pre validated domain reference UUID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{prevalidatedDomainReference}/token/reset": {
      "post": {
        "operationId": "resetClientPrevalidatedDomain",
        "tags": [
          "api_registration"
        ],
        "summary": "Reset prevalidated domain token for the selected reference Id",
        "description": "Reset pre validated domain token\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cld-[0-9a-f-]{36}",
              "description": "Pre validated domain reference UUID",
              "type": "string",
              "example": "cld-2263d498-6569-46d6-9359-f08a1d298d2d"
            },
            "in": "path",
            "name": "prevalidatedDomainReference",
            "description": "Pre validated domain reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDNS"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/client/domain/{prevalidatedDomainReference}/token/delete": {
      "post": {
        "operationId": "deleteClientPrevalidatedDomainToken",
        "tags": [
          "api_registration"
        ],
        "summary": "Delete prevalidated domain token for the selected reference Id",
        "description": "Delete pre validated domain token\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "nullable": false,
              "pattern": "cld-[0-9a-f-]{36}",
              "description": "Pre validated domain reference UUID",
              "type": "string",
              "example": "cld-2263d498-6569-46d6-9359-f08a1d298d2d"
            },
            "in": "path",
            "name": "prevalidatedDomainReference",
            "description": "Pre validated domain reference UUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientDNS"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/list/recipients": {
      "post": {
        "operationId": "listCertificateOrderAdditionalRecipients",
        "tags": [
          "api_registration"
        ],
        "summary": "Obtain a list of additional Certificate Order recipients",
        "description": "List additional Certificate Order recipients\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdditionalRecipient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/add/recipients": {
      "post": {
        "operationId": "addCertificateOrderAdditionalRecipients",
        "tags": [
          "api_registration"
        ],
        "summary": "Add additional recipients to Certificate Order",
        "description": "Add additional recipients to Certificate Order.\nExisting users are skipped.\nRetuns list of effectively added additional recipients.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Array of additional recipients",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdditionalRecipient"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdditionalRecipient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/delete/recipients": {
      "post": {
        "operationId": "deleteCertificateOrderAdditionalRecipients",
        "tags": [
          "api_registration"
        ],
        "summary": "Delete additional recipients to Certificate Order",
        "description": "Delete additional recipients to Certificate Order.\nUnknown users are skipped.\nRetuns list of effectively deleted additional recipients.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Array of additional recipients to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdditionalRecipient"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdditionalRecipient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/publish": {
      "post": {
        "operationId": "publishCertificate",
        "tags": [
          "api_registration"
        ],
        "summary": "Send a certificate publication request for selected Certificate Order",
        "description": "Publish or republish a certificate to the external source (LDAP, SFTP or file system).\nPublication rule must be enabled on the issued certificate.\nAn error is raised if the certificate is already published.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/order/{orderReference}/unpublish": {
      "post": {
        "operationId": "unpublishCertificate",
        "tags": [
          "api_registration"
        ],
        "summary": "Send a certificate un-publication request for selected Certificate Order",
        "description": "Remove the certificate from the external source (LDAP, SFTP or file system).\nPublication rule must be enabled on the issued certificate.\nAn error is raised if the certificate is already un published.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "pattern": "ord-[0-9a-f-]{36}",
              "description": "Certificate order reference UUID",
              "type": "string",
              "example": "ord-f0725b50-c533-4802-a844-de57bfb7a80e"
            },
            "in": "path",
            "name": "orderReference",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "SwissSign RA REST API",
    "version": "2.2.9",
    "contact": {
      "name": "SwissSign Support",
      "email": "ssc@swisssign.com"
    },
    "description": "See https://github.com/SwissSign-AG/RaApi/README.md"
  },
  "tags": []
}
