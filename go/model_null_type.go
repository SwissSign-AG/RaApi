/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.0.0
Contact: opensource@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"fmt"
)

// NullType for adding nullability to a ref
type NullType string

// List of null_type
const (
	NULL NullType = "null"
)

// All allowed values of NullType enum
var AllowedNullTypeEnumValues = []NullType{
	"null",
}

func (v *NullType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NullType(value)
	for _, existing := range AllowedNullTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NullType", value)
}

// NewNullTypeFromValue returns a pointer to a valid NullType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNullTypeFromValue(v string) (*NullType, error) {
	ev := NullType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NullType: valid values are %v", v, AllowedNullTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NullType) IsValid() bool {
	for _, existing := range AllowedNullTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to null_type value
func (v NullType) Ptr() *NullType {
	return &v
}

type NullableNullType struct {
	value *NullType
	isSet bool
}

func (v NullableNullType) Get() *NullType {
	return v.value
}

func (v *NullableNullType) Set(val *NullType) {
	v.value = val
	v.isSet = true
}

func (v NullableNullType) IsSet() bool {
	return v.isSet
}

func (v *NullableNullType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullType(val *NullType) *NullableNullType {
	return &NullableNullType{value: val, isSet: true}
}

func (v NullableNullType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

