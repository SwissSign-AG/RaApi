/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.0.0
Contact: opensource@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"fmt"
)

// DNSOwnerCheck Type of DNS owner check method
type DNSOwnerCheck string

// List of DNSOwnerCheck
const (
	CABDNS DNSOwnerCheck = "CABDNS"
	CABHTTP DNSOwnerCheck = "CABHTTP"
	CONSTRUCTEDEMAIL DNSOwnerCheck = "CONSTRUCTEDEMAIL"
	EMAILCONFIRMATION DNSOwnerCheck = "EMAILCONFIRMATION"
	UNKNOWN DNSOwnerCheck = "UNKNOWN"
)

// All allowed values of DNSOwnerCheck enum
var AllowedDNSOwnerCheckEnumValues = []DNSOwnerCheck{
	"CABDNS",
	"CABHTTP",
	"CONSTRUCTEDEMAIL",
	"EMAILCONFIRMATION",
	"UNKNOWN",
}

func (v *DNSOwnerCheck) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DNSOwnerCheck(value)
	for _, existing := range AllowedDNSOwnerCheckEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DNSOwnerCheck", value)
}

// NewDNSOwnerCheckFromValue returns a pointer to a valid DNSOwnerCheck
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDNSOwnerCheckFromValue(v string) (*DNSOwnerCheck, error) {
	ev := DNSOwnerCheck(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DNSOwnerCheck: valid values are %v", v, AllowedDNSOwnerCheckEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DNSOwnerCheck) IsValid() bool {
	for _, existing := range AllowedDNSOwnerCheckEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DNSOwnerCheck value
func (v DNSOwnerCheck) Ptr() *DNSOwnerCheck {
	return &v
}

type NullableDNSOwnerCheck struct {
	value *DNSOwnerCheck
	isSet bool
}

func (v NullableDNSOwnerCheck) Get() *DNSOwnerCheck {
	return v.value
}

func (v *NullableDNSOwnerCheck) Set(val *DNSOwnerCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSOwnerCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSOwnerCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSOwnerCheck(val *DNSOwnerCheck) *NullableDNSOwnerCheck {
	return &NullableDNSOwnerCheck{value: val, isSet: true}
}

func (v NullableDNSOwnerCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSOwnerCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

