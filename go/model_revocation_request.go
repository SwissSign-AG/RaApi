/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RevocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevocationRequest{}

// RevocationRequest struct for RevocationRequest
type RevocationRequest struct {
	// Certificate serial number (Big Integer HEX encoded)
	SerialNumber string `json:"serialNumber"`
	// Revocation reason
	RevocationReason string `json:"revocationReason"`
	// Certificate issuer distinguished name
	IssuerName string `json:"issuerName"`
	// First- and last name of revocation requestor. Revocation requestor must be used when API account is of type SERVICE_ACCOUNT
	RevocationRequestor *string `json:"revocationRequestor,omitempty"`
}

type _RevocationRequest RevocationRequest

// NewRevocationRequest instantiates a new RevocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevocationRequest(serialNumber string, revocationReason string, issuerName string) *RevocationRequest {
	this := RevocationRequest{}
	this.SerialNumber = serialNumber
	this.RevocationReason = revocationReason
	this.IssuerName = issuerName
	return &this
}

// NewRevocationRequestWithDefaults instantiates a new RevocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevocationRequestWithDefaults() *RevocationRequest {
	this := RevocationRequest{}
	return &this
}

// GetSerialNumber returns the SerialNumber field value
func (o *RevocationRequest) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *RevocationRequest) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *RevocationRequest) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetRevocationReason returns the RevocationReason field value
func (o *RevocationRequest) GetRevocationReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevocationReason
}

// GetRevocationReasonOk returns a tuple with the RevocationReason field value
// and a boolean to check if the value has been set.
func (o *RevocationRequest) GetRevocationReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevocationReason, true
}

// SetRevocationReason sets field value
func (o *RevocationRequest) SetRevocationReason(v string) {
	o.RevocationReason = v
}

// GetIssuerName returns the IssuerName field value
func (o *RevocationRequest) GetIssuerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value
// and a boolean to check if the value has been set.
func (o *RevocationRequest) GetIssuerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerName, true
}

// SetIssuerName sets field value
func (o *RevocationRequest) SetIssuerName(v string) {
	o.IssuerName = v
}

// GetRevocationRequestor returns the RevocationRequestor field value if set, zero value otherwise.
func (o *RevocationRequest) GetRevocationRequestor() string {
	if o == nil || IsNil(o.RevocationRequestor) {
		var ret string
		return ret
	}
	return *o.RevocationRequestor
}

// GetRevocationRequestorOk returns a tuple with the RevocationRequestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationRequest) GetRevocationRequestorOk() (*string, bool) {
	if o == nil || IsNil(o.RevocationRequestor) {
		return nil, false
	}
	return o.RevocationRequestor, true
}

// HasRevocationRequestor returns a boolean if a field has been set.
func (o *RevocationRequest) HasRevocationRequestor() bool {
	if o != nil && !IsNil(o.RevocationRequestor) {
		return true
	}

	return false
}

// SetRevocationRequestor gets a reference to the given string and assigns it to the RevocationRequestor field.
func (o *RevocationRequest) SetRevocationRequestor(v string) {
	o.RevocationRequestor = &v
}

func (o RevocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["revocationReason"] = o.RevocationReason
	toSerialize["issuerName"] = o.IssuerName
	if !IsNil(o.RevocationRequestor) {
		toSerialize["revocationRequestor"] = o.RevocationRequestor
	}
	return toSerialize, nil
}

func (o *RevocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serialNumber",
		"revocationReason",
		"issuerName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevocationRequest := _RevocationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevocationRequest)

	if err != nil {
		return err
	}

	*o = RevocationRequest(varRevocationRequest)

	return err
}

type NullableRevocationRequest struct {
	value *RevocationRequest
	isSet bool
}

func (v NullableRevocationRequest) Get() *RevocationRequest {
	return v.value
}

func (v *NullableRevocationRequest) Set(val *RevocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRevocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRevocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevocationRequest(val *RevocationRequest) *NullableRevocationRequest {
	return &NullableRevocationRequest{value: val, isSet: true}
}

func (v NullableRevocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


