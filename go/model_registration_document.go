/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegistrationDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrationDocument{}

// RegistrationDocument struct for RegistrationDocument
type RegistrationDocument struct {
	// document name
	DocumentName string `json:"documentName"`
	// Base64 encoded byte array of the document content
	Document string `json:"document"`
}

type _RegistrationDocument RegistrationDocument

// NewRegistrationDocument instantiates a new RegistrationDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationDocument(documentName string, document string) *RegistrationDocument {
	this := RegistrationDocument{}
	this.DocumentName = documentName
	this.Document = document
	return &this
}

// NewRegistrationDocumentWithDefaults instantiates a new RegistrationDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationDocumentWithDefaults() *RegistrationDocument {
	this := RegistrationDocument{}
	return &this
}

// GetDocumentName returns the DocumentName field value
func (o *RegistrationDocument) GetDocumentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentName
}

// GetDocumentNameOk returns a tuple with the DocumentName field value
// and a boolean to check if the value has been set.
func (o *RegistrationDocument) GetDocumentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentName, true
}

// SetDocumentName sets field value
func (o *RegistrationDocument) SetDocumentName(v string) {
	o.DocumentName = v
}

// GetDocument returns the Document field value
func (o *RegistrationDocument) GetDocument() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Document
}

// GetDocumentOk returns a tuple with the Document field value
// and a boolean to check if the value has been set.
func (o *RegistrationDocument) GetDocumentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Document, true
}

// SetDocument sets field value
func (o *RegistrationDocument) SetDocument(v string) {
	o.Document = v
}

func (o RegistrationDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrationDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentName"] = o.DocumentName
	toSerialize["document"] = o.Document
	return toSerialize, nil
}

func (o *RegistrationDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentName",
		"document",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegistrationDocument := _RegistrationDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegistrationDocument)

	if err != nil {
		return err
	}

	*o = RegistrationDocument(varRegistrationDocument)

	return err
}

type NullableRegistrationDocument struct {
	value *RegistrationDocument
	isSet bool
}

func (v NullableRegistrationDocument) Get() *RegistrationDocument {
	return v.value
}

func (v *NullableRegistrationDocument) Set(val *RegistrationDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationDocument(val *RegistrationDocument) *NullableRegistrationDocument {
	return &NullableRegistrationDocument{value: val, isSet: true}
}

func (v NullableRegistrationDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


