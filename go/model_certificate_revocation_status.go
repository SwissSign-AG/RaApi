/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.0.0
Contact: opensource@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
	"fmt"
)

// CertificateRevocationStatus Certificate revocation
type CertificateRevocationStatus struct {
	NullType *NullType
	RevocationStatus *RevocationStatus
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CertificateRevocationStatus) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NullType
	err = json.Unmarshal(data, &dst.NullType);
	if err == nil {
		jsonNullType, _ := json.Marshal(dst.NullType)
		if string(jsonNullType) == "{}" { // empty struct
			dst.NullType = nil
		} else {
			return nil // data stored in dst.NullType, return on the first match
		}
	} else {
		dst.NullType = nil
	}

	// try to unmarshal JSON data into RevocationStatus
	err = json.Unmarshal(data, &dst.RevocationStatus);
	if err == nil {
		jsonRevocationStatus, _ := json.Marshal(dst.RevocationStatus)
		if string(jsonRevocationStatus) == "{}" { // empty struct
			dst.RevocationStatus = nil
		} else {
			return nil // data stored in dst.RevocationStatus, return on the first match
		}
	} else {
		dst.RevocationStatus = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(CertificateRevocationStatus)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CertificateRevocationStatus) MarshalJSON() ([]byte, error) {
	if src.NullType != nil {
		return json.Marshal(&src.NullType)
	}

	if src.RevocationStatus != nil {
		return json.Marshal(&src.RevocationStatus)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCertificateRevocationStatus struct {
	value *CertificateRevocationStatus
	isSet bool
}

func (v NullableCertificateRevocationStatus) Get() *CertificateRevocationStatus {
	return v.value
}

func (v *NullableCertificateRevocationStatus) Set(val *CertificateRevocationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateRevocationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateRevocationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateRevocationStatus(val *CertificateRevocationStatus) *NullableCertificateRevocationStatus {
	return &NullableCertificateRevocationStatus{value: val, isSet: true}
}

func (v NullableCertificateRevocationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateRevocationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


