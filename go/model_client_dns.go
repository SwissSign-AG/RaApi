/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ClientDNS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientDNS{}

// ClientDNS struct for ClientDNS
type ClientDNS struct {
	// Pre validated client domain reference
	Uuid string `json:"uuid" validate:"regexp=cld-[0-9a-f-]{36}"`
	// Client domain in punycode
	Domain string `json:"domain"`
	// Client domain in unicode
	DomainUnicode string `json:"domainUnicode"`
	// Indicates if the domain is validated
	Validated bool `json:"validated"`
	// Indicates if the domain is a trusted domain (for private PKIs). This setting is linked to the certificate product DNS validation rule for Private PKIs.
	TrustedDomain bool `json:"trustedDomain"`
	// Indicates when the domain got validated
	TimeValidated *time.Time `json:"timeValidated,omitempty"`
	// DNS validation type
	ValidationMethod string `json:"validationMethod"`
	// The random value to add to the DNS TXT record for the domain
	RandomValue *string `json:"randomValue,omitempty"`
	// Indicates when the random value was created
	RandomValueTimeCreated *time.Time `json:"randomValueTimeCreated,omitempty"`
	// Indicates when the random value expires
	RandomValueTimeExpire *time.Time `json:"randomValueTimeExpire,omitempty"`
	// Indicates the validation result
	ValidationResult *string `json:"validationResult,omitempty"`
	// Indicates when the random value was created
	TimeExpired *time.Time `json:"timeExpired,omitempty"`
	// Indicates if the pre validation of the domain has expired
	Expired bool `json:"expired"`
	// Indicates if the random value is expired
	RandomValueTimeExpired bool `json:"randomValueTimeExpired"`
	Status *ClientDomainValidationStatus `json:"status,omitempty"`
}

type _ClientDNS ClientDNS

// NewClientDNS instantiates a new ClientDNS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientDNS(uuid string, domain string, domainUnicode string, validated bool, trustedDomain bool, validationMethod string, expired bool, randomValueTimeExpired bool) *ClientDNS {
	this := ClientDNS{}
	this.Uuid = uuid
	this.Domain = domain
	this.DomainUnicode = domainUnicode
	this.Validated = validated
	this.TrustedDomain = trustedDomain
	this.ValidationMethod = validationMethod
	this.Expired = expired
	this.RandomValueTimeExpired = randomValueTimeExpired
	return &this
}

// NewClientDNSWithDefaults instantiates a new ClientDNS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientDNSWithDefaults() *ClientDNS {
	this := ClientDNS{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *ClientDNS) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ClientDNS) SetUuid(v string) {
	o.Uuid = v
}

// GetDomain returns the Domain field value
func (o *ClientDNS) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ClientDNS) SetDomain(v string) {
	o.Domain = v
}

// GetDomainUnicode returns the DomainUnicode field value
func (o *ClientDNS) GetDomainUnicode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainUnicode
}

// GetDomainUnicodeOk returns a tuple with the DomainUnicode field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetDomainUnicodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainUnicode, true
}

// SetDomainUnicode sets field value
func (o *ClientDNS) SetDomainUnicode(v string) {
	o.DomainUnicode = v
}

// GetValidated returns the Validated field value
func (o *ClientDNS) GetValidated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Validated
}

// GetValidatedOk returns a tuple with the Validated field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetValidatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validated, true
}

// SetValidated sets field value
func (o *ClientDNS) SetValidated(v bool) {
	o.Validated = v
}

// GetTrustedDomain returns the TrustedDomain field value
func (o *ClientDNS) GetTrustedDomain() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TrustedDomain
}

// GetTrustedDomainOk returns a tuple with the TrustedDomain field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetTrustedDomainOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrustedDomain, true
}

// SetTrustedDomain sets field value
func (o *ClientDNS) SetTrustedDomain(v bool) {
	o.TrustedDomain = v
}

// GetTimeValidated returns the TimeValidated field value if set, zero value otherwise.
func (o *ClientDNS) GetTimeValidated() time.Time {
	if o == nil || IsNil(o.TimeValidated) {
		var ret time.Time
		return ret
	}
	return *o.TimeValidated
}

// GetTimeValidatedOk returns a tuple with the TimeValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetTimeValidatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeValidated) {
		return nil, false
	}
	return o.TimeValidated, true
}

// HasTimeValidated returns a boolean if a field has been set.
func (o *ClientDNS) HasTimeValidated() bool {
	if o != nil && !IsNil(o.TimeValidated) {
		return true
	}

	return false
}

// SetTimeValidated gets a reference to the given time.Time and assigns it to the TimeValidated field.
func (o *ClientDNS) SetTimeValidated(v time.Time) {
	o.TimeValidated = &v
}

// GetValidationMethod returns the ValidationMethod field value
func (o *ClientDNS) GetValidationMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidationMethod
}

// GetValidationMethodOk returns a tuple with the ValidationMethod field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetValidationMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidationMethod, true
}

// SetValidationMethod sets field value
func (o *ClientDNS) SetValidationMethod(v string) {
	o.ValidationMethod = v
}

// GetRandomValue returns the RandomValue field value if set, zero value otherwise.
func (o *ClientDNS) GetRandomValue() string {
	if o == nil || IsNil(o.RandomValue) {
		var ret string
		return ret
	}
	return *o.RandomValue
}

// GetRandomValueOk returns a tuple with the RandomValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetRandomValueOk() (*string, bool) {
	if o == nil || IsNil(o.RandomValue) {
		return nil, false
	}
	return o.RandomValue, true
}

// HasRandomValue returns a boolean if a field has been set.
func (o *ClientDNS) HasRandomValue() bool {
	if o != nil && !IsNil(o.RandomValue) {
		return true
	}

	return false
}

// SetRandomValue gets a reference to the given string and assigns it to the RandomValue field.
func (o *ClientDNS) SetRandomValue(v string) {
	o.RandomValue = &v
}

// GetRandomValueTimeCreated returns the RandomValueTimeCreated field value if set, zero value otherwise.
func (o *ClientDNS) GetRandomValueTimeCreated() time.Time {
	if o == nil || IsNil(o.RandomValueTimeCreated) {
		var ret time.Time
		return ret
	}
	return *o.RandomValueTimeCreated
}

// GetRandomValueTimeCreatedOk returns a tuple with the RandomValueTimeCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetRandomValueTimeCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RandomValueTimeCreated) {
		return nil, false
	}
	return o.RandomValueTimeCreated, true
}

// HasRandomValueTimeCreated returns a boolean if a field has been set.
func (o *ClientDNS) HasRandomValueTimeCreated() bool {
	if o != nil && !IsNil(o.RandomValueTimeCreated) {
		return true
	}

	return false
}

// SetRandomValueTimeCreated gets a reference to the given time.Time and assigns it to the RandomValueTimeCreated field.
func (o *ClientDNS) SetRandomValueTimeCreated(v time.Time) {
	o.RandomValueTimeCreated = &v
}

// GetRandomValueTimeExpire returns the RandomValueTimeExpire field value if set, zero value otherwise.
func (o *ClientDNS) GetRandomValueTimeExpire() time.Time {
	if o == nil || IsNil(o.RandomValueTimeExpire) {
		var ret time.Time
		return ret
	}
	return *o.RandomValueTimeExpire
}

// GetRandomValueTimeExpireOk returns a tuple with the RandomValueTimeExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetRandomValueTimeExpireOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RandomValueTimeExpire) {
		return nil, false
	}
	return o.RandomValueTimeExpire, true
}

// HasRandomValueTimeExpire returns a boolean if a field has been set.
func (o *ClientDNS) HasRandomValueTimeExpire() bool {
	if o != nil && !IsNil(o.RandomValueTimeExpire) {
		return true
	}

	return false
}

// SetRandomValueTimeExpire gets a reference to the given time.Time and assigns it to the RandomValueTimeExpire field.
func (o *ClientDNS) SetRandomValueTimeExpire(v time.Time) {
	o.RandomValueTimeExpire = &v
}

// GetValidationResult returns the ValidationResult field value if set, zero value otherwise.
func (o *ClientDNS) GetValidationResult() string {
	if o == nil || IsNil(o.ValidationResult) {
		var ret string
		return ret
	}
	return *o.ValidationResult
}

// GetValidationResultOk returns a tuple with the ValidationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetValidationResultOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationResult) {
		return nil, false
	}
	return o.ValidationResult, true
}

// HasValidationResult returns a boolean if a field has been set.
func (o *ClientDNS) HasValidationResult() bool {
	if o != nil && !IsNil(o.ValidationResult) {
		return true
	}

	return false
}

// SetValidationResult gets a reference to the given string and assigns it to the ValidationResult field.
func (o *ClientDNS) SetValidationResult(v string) {
	o.ValidationResult = &v
}

// GetTimeExpired returns the TimeExpired field value if set, zero value otherwise.
func (o *ClientDNS) GetTimeExpired() time.Time {
	if o == nil || IsNil(o.TimeExpired) {
		var ret time.Time
		return ret
	}
	return *o.TimeExpired
}

// GetTimeExpiredOk returns a tuple with the TimeExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetTimeExpiredOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeExpired) {
		return nil, false
	}
	return o.TimeExpired, true
}

// HasTimeExpired returns a boolean if a field has been set.
func (o *ClientDNS) HasTimeExpired() bool {
	if o != nil && !IsNil(o.TimeExpired) {
		return true
	}

	return false
}

// SetTimeExpired gets a reference to the given time.Time and assigns it to the TimeExpired field.
func (o *ClientDNS) SetTimeExpired(v time.Time) {
	o.TimeExpired = &v
}

// GetExpired returns the Expired field value
func (o *ClientDNS) GetExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expired, true
}

// SetExpired sets field value
func (o *ClientDNS) SetExpired(v bool) {
	o.Expired = v
}

// GetRandomValueTimeExpired returns the RandomValueTimeExpired field value
func (o *ClientDNS) GetRandomValueTimeExpired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RandomValueTimeExpired
}

// GetRandomValueTimeExpiredOk returns a tuple with the RandomValueTimeExpired field value
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetRandomValueTimeExpiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RandomValueTimeExpired, true
}

// SetRandomValueTimeExpired sets field value
func (o *ClientDNS) SetRandomValueTimeExpired(v bool) {
	o.RandomValueTimeExpired = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ClientDNS) GetStatus() ClientDomainValidationStatus {
	if o == nil || IsNil(o.Status) {
		var ret ClientDomainValidationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientDNS) GetStatusOk() (*ClientDomainValidationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ClientDNS) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ClientDomainValidationStatus and assigns it to the Status field.
func (o *ClientDNS) SetStatus(v ClientDomainValidationStatus) {
	o.Status = &v
}

func (o ClientDNS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientDNS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["domain"] = o.Domain
	toSerialize["domainUnicode"] = o.DomainUnicode
	toSerialize["validated"] = o.Validated
	toSerialize["trustedDomain"] = o.TrustedDomain
	if !IsNil(o.TimeValidated) {
		toSerialize["timeValidated"] = o.TimeValidated
	}
	toSerialize["validationMethod"] = o.ValidationMethod
	if !IsNil(o.RandomValue) {
		toSerialize["randomValue"] = o.RandomValue
	}
	if !IsNil(o.RandomValueTimeCreated) {
		toSerialize["randomValueTimeCreated"] = o.RandomValueTimeCreated
	}
	if !IsNil(o.RandomValueTimeExpire) {
		toSerialize["randomValueTimeExpire"] = o.RandomValueTimeExpire
	}
	if !IsNil(o.ValidationResult) {
		toSerialize["validationResult"] = o.ValidationResult
	}
	if !IsNil(o.TimeExpired) {
		toSerialize["timeExpired"] = o.TimeExpired
	}
	toSerialize["expired"] = o.Expired
	toSerialize["randomValueTimeExpired"] = o.RandomValueTimeExpired
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *ClientDNS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"domain",
		"domainUnicode",
		"validated",
		"trustedDomain",
		"validationMethod",
		"expired",
		"randomValueTimeExpired",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientDNS := _ClientDNS{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClientDNS)

	if err != nil {
		return err
	}

	*o = ClientDNS(varClientDNS)

	return err
}

type NullableClientDNS struct {
	value *ClientDNS
	isSet bool
}

func (v NullableClientDNS) Get() *ClientDNS {
	return v.value
}

func (v *NullableClientDNS) Set(val *ClientDNS) {
	v.value = val
	v.isSet = true
}

func (v NullableClientDNS) IsSet() bool {
	return v.isSet
}

func (v *NullableClientDNS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientDNS(val *ClientDNS) *NullableClientDNS {
	return &NullableClientDNS{value: val, isSet: true}
}

func (v NullableClientDNS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientDNS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


