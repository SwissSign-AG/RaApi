/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.5.13
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
)

// CertificateOrders struct for CertificateOrders
type CertificateOrders struct {
	Draw int32 `json:"draw"`
	// Total records, after filtering (i.e. the total number of records after filtering has been applied - not just the number of records being returned for this page of data).
	RecordsFiltered int32 `json:"recordsFiltered"`
	// Total records, before filtering (i.e. the total number of records in the database)
	RecordsTotal int32 `json:"recordsTotal"`
	Data []CertificateOrder `json:"data"`
}

// NewCertificateOrders instantiates a new CertificateOrders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateOrders(draw int32, recordsFiltered int32, recordsTotal int32, data []CertificateOrder) *CertificateOrders {
	this := CertificateOrders{}
	this.Draw = draw
	this.RecordsFiltered = recordsFiltered
	this.RecordsTotal = recordsTotal
	this.Data = data
	return &this
}

// NewCertificateOrdersWithDefaults instantiates a new CertificateOrders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateOrdersWithDefaults() *CertificateOrders {
	this := CertificateOrders{}
	return &this
}

// GetDraw returns the Draw field value
func (o *CertificateOrders) GetDraw() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Draw
}

// GetDrawOk returns a tuple with the Draw field value
// and a boolean to check if the value has been set.
func (o *CertificateOrders) GetDrawOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Draw, true
}

// SetDraw sets field value
func (o *CertificateOrders) SetDraw(v int32) {
	o.Draw = v
}

// GetRecordsFiltered returns the RecordsFiltered field value
func (o *CertificateOrders) GetRecordsFiltered() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecordsFiltered
}

// GetRecordsFilteredOk returns a tuple with the RecordsFiltered field value
// and a boolean to check if the value has been set.
func (o *CertificateOrders) GetRecordsFilteredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordsFiltered, true
}

// SetRecordsFiltered sets field value
func (o *CertificateOrders) SetRecordsFiltered(v int32) {
	o.RecordsFiltered = v
}

// GetRecordsTotal returns the RecordsTotal field value
func (o *CertificateOrders) GetRecordsTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecordsTotal
}

// GetRecordsTotalOk returns a tuple with the RecordsTotal field value
// and a boolean to check if the value has been set.
func (o *CertificateOrders) GetRecordsTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordsTotal, true
}

// SetRecordsTotal sets field value
func (o *CertificateOrders) SetRecordsTotal(v int32) {
	o.RecordsTotal = v
}

// GetData returns the Data field value
func (o *CertificateOrders) GetData() []CertificateOrder {
	if o == nil {
		var ret []CertificateOrder
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CertificateOrders) GetDataOk() ([]CertificateOrder, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *CertificateOrders) SetData(v []CertificateOrder) {
	o.Data = v
}

func (o CertificateOrders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["draw"] = o.Draw
	}
	if true {
		toSerialize["recordsFiltered"] = o.RecordsFiltered
	}
	if true {
		toSerialize["recordsTotal"] = o.RecordsTotal
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateOrders struct {
	value *CertificateOrders
	isSet bool
}

func (v NullableCertificateOrders) Get() *CertificateOrders {
	return v.value
}

func (v *NullableCertificateOrders) Set(val *CertificateOrders) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOrders) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOrders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOrders(val *CertificateOrders) *NullableCertificateOrders {
	return &NullableCertificateOrders{value: val, isSet: true}
}

func (v NullableCertificateOrders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOrders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


