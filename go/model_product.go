/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.0.209
Contact: opensource@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
)

// Product struct for Product
type Product struct {
	// Product UUID reference
	Uuid string `json:"uuid"`
	// Certificate product name
	ProductName *string `json:"productName,omitempty"`
	// Product additional description
	ProductDescription NullableString `json:"productDescription,omitempty"`
	// Key generation protocol
	KeyGenerationType string `json:"keyGenerationType"`
	KeyType KeyType `json:"keyType"`
	// Indicate if the certificate sends a notification on issuance
	IssuanceNotification bool `json:"issuanceNotification"`
	// Indicate if the certificate sends a notification on revocation
	RevocationNotification bool `json:"revocationNotification"`
	// Indicate if the certificate requires an authorization on issuance/revocation
	Authorization bool `json:"authorization"`
	// Indicate if the certificate sends a notification for renewal
	RenewalRule bool `json:"renewalRule"`
	// Indicate if the certificate is published to the public LDAP after issuance
	PublishCertificate bool `json:"publishCertificate"`
	// Indicate if the certificate publication can be overridden
	ClientPublishCertificateOverride bool `json:"clientPublishCertificateOverride"`
	// Indicate the default value if publication override is enabled
	ClientPublishCertificateOverrideDefault bool `json:"clientPublishCertificateOverrideDefault"`
	// Indicate if the certificate product has an expiration date
	ExpirationDate NullableString `json:"expirationDate,omitempty"`
}

// NewProduct instantiates a new Product object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduct(uuid string, keyGenerationType string, keyType KeyType, issuanceNotification bool, revocationNotification bool, authorization bool, renewalRule bool, publishCertificate bool, clientPublishCertificateOverride bool, clientPublishCertificateOverrideDefault bool) *Product {
	this := Product{}
	this.Uuid = uuid
	this.KeyGenerationType = keyGenerationType
	this.KeyType = keyType
	this.IssuanceNotification = issuanceNotification
	this.RevocationNotification = revocationNotification
	this.Authorization = authorization
	this.RenewalRule = renewalRule
	this.PublishCertificate = publishCertificate
	this.ClientPublishCertificateOverride = clientPublishCertificateOverride
	this.ClientPublishCertificateOverrideDefault = clientPublishCertificateOverrideDefault
	return &this
}

// NewProductWithDefaults instantiates a new Product object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductWithDefaults() *Product {
	this := Product{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Product) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Product) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Product) SetUuid(v string) {
	o.Uuid = v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *Product) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Product) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *Product) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *Product) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductDescription returns the ProductDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Product) GetProductDescription() string {
	if o == nil || o.ProductDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductDescription.Get()
}

// GetProductDescriptionOk returns a tuple with the ProductDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Product) GetProductDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductDescription.Get(), o.ProductDescription.IsSet()
}

// HasProductDescription returns a boolean if a field has been set.
func (o *Product) HasProductDescription() bool {
	if o != nil && o.ProductDescription.IsSet() {
		return true
	}

	return false
}

// SetProductDescription gets a reference to the given NullableString and assigns it to the ProductDescription field.
func (o *Product) SetProductDescription(v string) {
	o.ProductDescription.Set(&v)
}
// SetProductDescriptionNil sets the value for ProductDescription to be an explicit nil
func (o *Product) SetProductDescriptionNil() {
	o.ProductDescription.Set(nil)
}

// UnsetProductDescription ensures that no value is present for ProductDescription, not even an explicit nil
func (o *Product) UnsetProductDescription() {
	o.ProductDescription.Unset()
}

// GetKeyGenerationType returns the KeyGenerationType field value
func (o *Product) GetKeyGenerationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyGenerationType
}

// GetKeyGenerationTypeOk returns a tuple with the KeyGenerationType field value
// and a boolean to check if the value has been set.
func (o *Product) GetKeyGenerationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyGenerationType, true
}

// SetKeyGenerationType sets field value
func (o *Product) SetKeyGenerationType(v string) {
	o.KeyGenerationType = v
}

// GetKeyType returns the KeyType field value
func (o *Product) GetKeyType() KeyType {
	if o == nil {
		var ret KeyType
		return ret
	}

	return o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value
// and a boolean to check if the value has been set.
func (o *Product) GetKeyTypeOk() (*KeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyType, true
}

// SetKeyType sets field value
func (o *Product) SetKeyType(v KeyType) {
	o.KeyType = v
}

// GetIssuanceNotification returns the IssuanceNotification field value
func (o *Product) GetIssuanceNotification() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IssuanceNotification
}

// GetIssuanceNotificationOk returns a tuple with the IssuanceNotification field value
// and a boolean to check if the value has been set.
func (o *Product) GetIssuanceNotificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuanceNotification, true
}

// SetIssuanceNotification sets field value
func (o *Product) SetIssuanceNotification(v bool) {
	o.IssuanceNotification = v
}

// GetRevocationNotification returns the RevocationNotification field value
func (o *Product) GetRevocationNotification() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RevocationNotification
}

// GetRevocationNotificationOk returns a tuple with the RevocationNotification field value
// and a boolean to check if the value has been set.
func (o *Product) GetRevocationNotificationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevocationNotification, true
}

// SetRevocationNotification sets field value
func (o *Product) SetRevocationNotification(v bool) {
	o.RevocationNotification = v
}

// GetAuthorization returns the Authorization field value
func (o *Product) GetAuthorization() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value
// and a boolean to check if the value has been set.
func (o *Product) GetAuthorizationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authorization, true
}

// SetAuthorization sets field value
func (o *Product) SetAuthorization(v bool) {
	o.Authorization = v
}

// GetRenewalRule returns the RenewalRule field value
func (o *Product) GetRenewalRule() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RenewalRule
}

// GetRenewalRuleOk returns a tuple with the RenewalRule field value
// and a boolean to check if the value has been set.
func (o *Product) GetRenewalRuleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RenewalRule, true
}

// SetRenewalRule sets field value
func (o *Product) SetRenewalRule(v bool) {
	o.RenewalRule = v
}

// GetPublishCertificate returns the PublishCertificate field value
func (o *Product) GetPublishCertificate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PublishCertificate
}

// GetPublishCertificateOk returns a tuple with the PublishCertificate field value
// and a boolean to check if the value has been set.
func (o *Product) GetPublishCertificateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishCertificate, true
}

// SetPublishCertificate sets field value
func (o *Product) SetPublishCertificate(v bool) {
	o.PublishCertificate = v
}

// GetClientPublishCertificateOverride returns the ClientPublishCertificateOverride field value
func (o *Product) GetClientPublishCertificateOverride() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClientPublishCertificateOverride
}

// GetClientPublishCertificateOverrideOk returns a tuple with the ClientPublishCertificateOverride field value
// and a boolean to check if the value has been set.
func (o *Product) GetClientPublishCertificateOverrideOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientPublishCertificateOverride, true
}

// SetClientPublishCertificateOverride sets field value
func (o *Product) SetClientPublishCertificateOverride(v bool) {
	o.ClientPublishCertificateOverride = v
}

// GetClientPublishCertificateOverrideDefault returns the ClientPublishCertificateOverrideDefault field value
func (o *Product) GetClientPublishCertificateOverrideDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ClientPublishCertificateOverrideDefault
}

// GetClientPublishCertificateOverrideDefaultOk returns a tuple with the ClientPublishCertificateOverrideDefault field value
// and a boolean to check if the value has been set.
func (o *Product) GetClientPublishCertificateOverrideDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientPublishCertificateOverrideDefault, true
}

// SetClientPublishCertificateOverrideDefault sets field value
func (o *Product) SetClientPublishCertificateOverrideDefault(v bool) {
	o.ClientPublishCertificateOverrideDefault = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Product) GetExpirationDate() string {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Product) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Product) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableString and assigns it to the ExpirationDate field.
func (o *Product) SetExpirationDate(v string) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *Product) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *Product) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

func (o Product) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if o.ProductName != nil {
		toSerialize["productName"] = o.ProductName
	}
	if o.ProductDescription.IsSet() {
		toSerialize["productDescription"] = o.ProductDescription.Get()
	}
	if true {
		toSerialize["keyGenerationType"] = o.KeyGenerationType
	}
	if true {
		toSerialize["keyType"] = o.KeyType
	}
	if true {
		toSerialize["issuanceNotification"] = o.IssuanceNotification
	}
	if true {
		toSerialize["revocationNotification"] = o.RevocationNotification
	}
	if true {
		toSerialize["authorization"] = o.Authorization
	}
	if true {
		toSerialize["renewalRule"] = o.RenewalRule
	}
	if true {
		toSerialize["publishCertificate"] = o.PublishCertificate
	}
	if true {
		toSerialize["clientPublishCertificateOverride"] = o.ClientPublishCertificateOverride
	}
	if true {
		toSerialize["clientPublishCertificateOverrideDefault"] = o.ClientPublishCertificateOverrideDefault
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expirationDate"] = o.ExpirationDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProduct struct {
	value *Product
	isSet bool
}

func (v NullableProduct) Get() *Product {
	return v.value
}

func (v *NullableProduct) Set(val *Product) {
	v.value = val
	v.isSet = true
}

func (v NullableProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduct(val *Product) *NullableProduct {
	return &NullableProduct{value: val, isSet: true}
}

func (v NullableProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


