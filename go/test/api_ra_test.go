/*
SwissSign RA REST API

Testing RAAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package swisssign_ra_api.v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_swisssign_ra_api.v2_RAAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RAAPIService AddCertificateOrderAdditionalRecipients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.AddCertificateOrderAdditionalRecipients(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService CreateClientPrevalidatedDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientReference string

		resp, httpRes, err := apiClient.RAAPI.CreateClientPrevalidatedDomains(context.Background(), clientReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService DeleteCertificateOrderAdditionalRecipients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.DeleteCertificateOrderAdditionalRecipients(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService DeleteClientPrevalidatedDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prevalidatedDomainReference string

		httpRes, err := apiClient.RAAPI.DeleteClientPrevalidatedDomain(context.Background(), prevalidatedDomainReference).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService DeleteClientPrevalidatedDomainToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prevalidatedDomainReference string

		resp, httpRes, err := apiClient.RAAPI.DeleteClientPrevalidatedDomainToken(context.Background(), prevalidatedDomainReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetCertificateChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.GetCertificateChain(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetCertificateOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.GetCertificateOrder(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetCertificateOrderStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.GetCertificateOrderStatus(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetCertificateOrderTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.GetCertificateOrderTasks(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetCertificateOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RAAPI.GetCertificateOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientReference string

		resp, httpRes, err := apiClient.RAAPI.GetClient(context.Background(), clientReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetClientPrevalidatedDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prevalidatedDomainReference string

		resp, httpRes, err := apiClient.RAAPI.GetClientPrevalidatedDomain(context.Background(), prevalidatedDomainReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService GetClientPrevalidatedDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clientReference string

		resp, httpRes, err := apiClient.RAAPI.GetClientPrevalidatedDomains(context.Background(), clientReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService IssueCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productReference string

		resp, httpRes, err := apiClient.RAAPI.IssueCertificate(context.Background(), productReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService IssueCertificateV22", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RAAPI.IssueCertificateV22(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService Jwt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userName string

		resp, httpRes, err := apiClient.RAAPI.Jwt(context.Background(), userName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService ListCertificateOrderAdditionalRecipients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.ListCertificateOrderAdditionalRecipients(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService PublishCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		httpRes, err := apiClient.RAAPI.PublishCertificate(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService ReplaceCertificateOrderTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		resp, httpRes, err := apiClient.RAAPI.ReplaceCertificateOrderTags(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService ResetClientPrevalidatedDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prevalidatedDomainReference string

		resp, httpRes, err := apiClient.RAAPI.ResetClientPrevalidatedDomain(context.Background(), prevalidatedDomainReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService RevokeCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RAAPI.RevokeCertificates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService SearchClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RAAPI.SearchClients(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService SearchPagedCertificateOrders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RAAPI.SearchPagedCertificateOrders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService SearchPagedClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RAAPI.SearchPagedClients(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService UnpublishCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderReference string

		httpRes, err := apiClient.RAAPI.UnpublishCertificate(context.Background(), orderReference).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService ValidateClientPrevalidatedDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var prevalidatedDomainReference string

		resp, httpRes, err := apiClient.RAAPI.ValidateClientPrevalidatedDomain(context.Background(), prevalidatedDomainReference).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RAAPIService ValidateIssueRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RAAPI.ValidateIssueRequest(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
