/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CertificateOrderTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateOrderTask{}

// CertificateOrderTask struct for CertificateOrderTask
type CertificateOrderTask struct {
	// Certificate Order Task reference
	Uuid string `json:"uuid" validate:"regexp=job-[0-9a-f-]{36}"`
	// Certificate Order creation date time
	TimeCreated *time.Time `json:"timeCreated,omitempty"`
	// Scheduled date time
	TimeScheduled *time.Time `json:"timeScheduled,omitempty"`
	// Started date time
	TimeStarted *time.Time `json:"timeStarted,omitempty"`
	// Finished date time
	TimeFinished *time.Time `json:"timeFinished,omitempty"`
	Status JobStatus `json:"status"`
	Type JobType `json:"type"`
	// Number of executions
	NumberOfExecutions int32 `json:"numberOfExecutions"`
	// Response
	Response *string `json:"response,omitempty"`
	// Error message
	Error *string `json:"error,omitempty"`
}

type _CertificateOrderTask CertificateOrderTask

// NewCertificateOrderTask instantiates a new CertificateOrderTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateOrderTask(uuid string, status JobStatus, type_ JobType, numberOfExecutions int32) *CertificateOrderTask {
	this := CertificateOrderTask{}
	this.Uuid = uuid
	this.Status = status
	this.Type = type_
	this.NumberOfExecutions = numberOfExecutions
	return &this
}

// NewCertificateOrderTaskWithDefaults instantiates a new CertificateOrderTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateOrderTaskWithDefaults() *CertificateOrderTask {
	this := CertificateOrderTask{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *CertificateOrderTask) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CertificateOrderTask) SetUuid(v string) {
	o.Uuid = v
}

// GetTimeCreated returns the TimeCreated field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetTimeCreated() time.Time {
	if o == nil || IsNil(o.TimeCreated) {
		var ret time.Time
		return ret
	}
	return *o.TimeCreated
}

// GetTimeCreatedOk returns a tuple with the TimeCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetTimeCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeCreated) {
		return nil, false
	}
	return o.TimeCreated, true
}

// HasTimeCreated returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasTimeCreated() bool {
	if o != nil && !IsNil(o.TimeCreated) {
		return true
	}

	return false
}

// SetTimeCreated gets a reference to the given time.Time and assigns it to the TimeCreated field.
func (o *CertificateOrderTask) SetTimeCreated(v time.Time) {
	o.TimeCreated = &v
}

// GetTimeScheduled returns the TimeScheduled field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetTimeScheduled() time.Time {
	if o == nil || IsNil(o.TimeScheduled) {
		var ret time.Time
		return ret
	}
	return *o.TimeScheduled
}

// GetTimeScheduledOk returns a tuple with the TimeScheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetTimeScheduledOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeScheduled) {
		return nil, false
	}
	return o.TimeScheduled, true
}

// HasTimeScheduled returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasTimeScheduled() bool {
	if o != nil && !IsNil(o.TimeScheduled) {
		return true
	}

	return false
}

// SetTimeScheduled gets a reference to the given time.Time and assigns it to the TimeScheduled field.
func (o *CertificateOrderTask) SetTimeScheduled(v time.Time) {
	o.TimeScheduled = &v
}

// GetTimeStarted returns the TimeStarted field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetTimeStarted() time.Time {
	if o == nil || IsNil(o.TimeStarted) {
		var ret time.Time
		return ret
	}
	return *o.TimeStarted
}

// GetTimeStartedOk returns a tuple with the TimeStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetTimeStartedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeStarted) {
		return nil, false
	}
	return o.TimeStarted, true
}

// HasTimeStarted returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasTimeStarted() bool {
	if o != nil && !IsNil(o.TimeStarted) {
		return true
	}

	return false
}

// SetTimeStarted gets a reference to the given time.Time and assigns it to the TimeStarted field.
func (o *CertificateOrderTask) SetTimeStarted(v time.Time) {
	o.TimeStarted = &v
}

// GetTimeFinished returns the TimeFinished field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetTimeFinished() time.Time {
	if o == nil || IsNil(o.TimeFinished) {
		var ret time.Time
		return ret
	}
	return *o.TimeFinished
}

// GetTimeFinishedOk returns a tuple with the TimeFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetTimeFinishedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeFinished) {
		return nil, false
	}
	return o.TimeFinished, true
}

// HasTimeFinished returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasTimeFinished() bool {
	if o != nil && !IsNil(o.TimeFinished) {
		return true
	}

	return false
}

// SetTimeFinished gets a reference to the given time.Time and assigns it to the TimeFinished field.
func (o *CertificateOrderTask) SetTimeFinished(v time.Time) {
	o.TimeFinished = &v
}

// GetStatus returns the Status field value
func (o *CertificateOrderTask) GetStatus() JobStatus {
	if o == nil {
		var ret JobStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetStatusOk() (*JobStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CertificateOrderTask) SetStatus(v JobStatus) {
	o.Status = v
}

// GetType returns the Type field value
func (o *CertificateOrderTask) GetType() JobType {
	if o == nil {
		var ret JobType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetTypeOk() (*JobType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CertificateOrderTask) SetType(v JobType) {
	o.Type = v
}

// GetNumberOfExecutions returns the NumberOfExecutions field value
func (o *CertificateOrderTask) GetNumberOfExecutions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfExecutions
}

// GetNumberOfExecutionsOk returns a tuple with the NumberOfExecutions field value
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetNumberOfExecutionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfExecutions, true
}

// SetNumberOfExecutions sets field value
func (o *CertificateOrderTask) SetNumberOfExecutions(v int32) {
	o.NumberOfExecutions = v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetResponse() string {
	if o == nil || IsNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetResponseOk() (*string, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *CertificateOrderTask) SetResponse(v string) {
	o.Response = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CertificateOrderTask) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateOrderTask) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CertificateOrderTask) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *CertificateOrderTask) SetError(v string) {
	o.Error = &v
}

func (o CertificateOrderTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateOrderTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.TimeCreated) {
		toSerialize["timeCreated"] = o.TimeCreated
	}
	if !IsNil(o.TimeScheduled) {
		toSerialize["timeScheduled"] = o.TimeScheduled
	}
	if !IsNil(o.TimeStarted) {
		toSerialize["timeStarted"] = o.TimeStarted
	}
	if !IsNil(o.TimeFinished) {
		toSerialize["timeFinished"] = o.TimeFinished
	}
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	toSerialize["numberOfExecutions"] = o.NumberOfExecutions
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *CertificateOrderTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"status",
		"type",
		"numberOfExecutions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateOrderTask := _CertificateOrderTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateOrderTask)

	if err != nil {
		return err
	}

	*o = CertificateOrderTask(varCertificateOrderTask)

	return err
}

type NullableCertificateOrderTask struct {
	value *CertificateOrderTask
	isSet bool
}

func (v NullableCertificateOrderTask) Get() *CertificateOrderTask {
	return v.value
}

func (v *NullableCertificateOrderTask) Set(val *CertificateOrderTask) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOrderTask) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOrderTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOrderTask(val *CertificateOrderTask) *NullableCertificateOrderTask {
	return &NullableCertificateOrderTask{value: val, isSet: true}
}

func (v NullableCertificateOrderTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOrderTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


