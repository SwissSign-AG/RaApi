/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RevocationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevocationStatus{}

// RevocationStatus struct for RevocationStatus
type RevocationStatus struct {
	// Revocation date in UTC
	RevokedOn time.Time `json:"revokedOn"`
	Reason RevocationReason `json:"reason"`
	// email of the person who revoked the certificate
	RevokedBy string `json:"revokedBy"`
	// First- and last name of revocation requestor
	RevocationRequestor *string `json:"revocationRequestor,omitempty"`
}

type _RevocationStatus RevocationStatus

// NewRevocationStatus instantiates a new RevocationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevocationStatus(revokedOn time.Time, reason RevocationReason, revokedBy string) *RevocationStatus {
	this := RevocationStatus{}
	this.RevokedOn = revokedOn
	this.Reason = reason
	this.RevokedBy = revokedBy
	return &this
}

// NewRevocationStatusWithDefaults instantiates a new RevocationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevocationStatusWithDefaults() *RevocationStatus {
	this := RevocationStatus{}
	return &this
}

// GetRevokedOn returns the RevokedOn field value
func (o *RevocationStatus) GetRevokedOn() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RevokedOn
}

// GetRevokedOnOk returns a tuple with the RevokedOn field value
// and a boolean to check if the value has been set.
func (o *RevocationStatus) GetRevokedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevokedOn, true
}

// SetRevokedOn sets field value
func (o *RevocationStatus) SetRevokedOn(v time.Time) {
	o.RevokedOn = v
}

// GetReason returns the Reason field value
func (o *RevocationStatus) GetReason() RevocationReason {
	if o == nil {
		var ret RevocationReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *RevocationStatus) GetReasonOk() (*RevocationReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *RevocationStatus) SetReason(v RevocationReason) {
	o.Reason = v
}

// GetRevokedBy returns the RevokedBy field value
func (o *RevocationStatus) GetRevokedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevokedBy
}

// GetRevokedByOk returns a tuple with the RevokedBy field value
// and a boolean to check if the value has been set.
func (o *RevocationStatus) GetRevokedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevokedBy, true
}

// SetRevokedBy sets field value
func (o *RevocationStatus) SetRevokedBy(v string) {
	o.RevokedBy = v
}

// GetRevocationRequestor returns the RevocationRequestor field value if set, zero value otherwise.
func (o *RevocationStatus) GetRevocationRequestor() string {
	if o == nil || IsNil(o.RevocationRequestor) {
		var ret string
		return ret
	}
	return *o.RevocationRequestor
}

// GetRevocationRequestorOk returns a tuple with the RevocationRequestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevocationStatus) GetRevocationRequestorOk() (*string, bool) {
	if o == nil || IsNil(o.RevocationRequestor) {
		return nil, false
	}
	return o.RevocationRequestor, true
}

// HasRevocationRequestor returns a boolean if a field has been set.
func (o *RevocationStatus) HasRevocationRequestor() bool {
	if o != nil && !IsNil(o.RevocationRequestor) {
		return true
	}

	return false
}

// SetRevocationRequestor gets a reference to the given string and assigns it to the RevocationRequestor field.
func (o *RevocationStatus) SetRevocationRequestor(v string) {
	o.RevocationRequestor = &v
}

func (o RevocationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevocationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revokedOn"] = o.RevokedOn
	toSerialize["reason"] = o.Reason
	toSerialize["revokedBy"] = o.RevokedBy
	if !IsNil(o.RevocationRequestor) {
		toSerialize["revocationRequestor"] = o.RevocationRequestor
	}
	return toSerialize, nil
}

func (o *RevocationStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revokedOn",
		"reason",
		"revokedBy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevocationStatus := _RevocationStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevocationStatus)

	if err != nil {
		return err
	}

	*o = RevocationStatus(varRevocationStatus)

	return err
}

type NullableRevocationStatus struct {
	value *RevocationStatus
	isSet bool
}

func (v NullableRevocationStatus) Get() *RevocationStatus {
	return v.value
}

func (v *NullableRevocationStatus) Set(val *RevocationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRevocationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRevocationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevocationStatus(val *RevocationStatus) *NullableRevocationStatus {
	return &NullableRevocationStatus{value: val, isSet: true}
}

func (v NullableRevocationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevocationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


