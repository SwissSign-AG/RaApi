/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 3.4.4
Contact: ssc@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
)

// checks if the SearchCertificateOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCertificateOrder{}

// SearchCertificateOrder struct for SearchCertificateOrder
type SearchCertificateOrder struct {
	// Certificate Order reference
	OrderReference *string `json:"orderReference,omitempty" validate:"regexp=ord-[0-9a-f-]{36}"`
	// Certificate serial number (Big Integer HEX encoded) with optional wildcard attributes ? and/or *
	SerialNumber *string `json:"serialNumber,omitempty"`
	OrderStatus []CertificateOrderStatus `json:"orderStatus,omitempty"`
	RevocationReason []RevocationReason `json:"revocationReason,omitempty"`
	// Client reference UUID
	ClientReferences []string `json:"clientReferences,omitempty"`
	// Certificate Order not starting after Date
	StartAfter *time.Time `json:"startAfter,omitempty"`
	// Certificate Order not starting before Date
	StartBefore *time.Time `json:"startBefore,omitempty"`
	// Any certificate attribute OID or value with optional wildcard attributes ? and/or *
	Attribute *string `json:"attribute,omitempty"`
	// Include the certificate chain in the certificate order when available
	IncludeCertificateChain *bool `json:"includeCertificateChain,omitempty"`
	// Customer label/tags
	Tags []string `json:"tags,omitempty"`
}

// NewSearchCertificateOrder instantiates a new SearchCertificateOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCertificateOrder() *SearchCertificateOrder {
	this := SearchCertificateOrder{}
	return &this
}

// NewSearchCertificateOrderWithDefaults instantiates a new SearchCertificateOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCertificateOrderWithDefaults() *SearchCertificateOrder {
	this := SearchCertificateOrder{}
	return &this
}

// GetOrderReference returns the OrderReference field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetOrderReference() string {
	if o == nil || IsNil(o.OrderReference) {
		var ret string
		return ret
	}
	return *o.OrderReference
}

// GetOrderReferenceOk returns a tuple with the OrderReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetOrderReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.OrderReference) {
		return nil, false
	}
	return o.OrderReference, true
}

// HasOrderReference returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasOrderReference() bool {
	if o != nil && !IsNil(o.OrderReference) {
		return true
	}

	return false
}

// SetOrderReference gets a reference to the given string and assigns it to the OrderReference field.
func (o *SearchCertificateOrder) SetOrderReference(v string) {
	o.OrderReference = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *SearchCertificateOrder) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetOrderStatus() []CertificateOrderStatus {
	if o == nil || IsNil(o.OrderStatus) {
		var ret []CertificateOrderStatus
		return ret
	}
	return o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetOrderStatusOk() ([]CertificateOrderStatus, bool) {
	if o == nil || IsNil(o.OrderStatus) {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasOrderStatus() bool {
	if o != nil && !IsNil(o.OrderStatus) {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given []CertificateOrderStatus and assigns it to the OrderStatus field.
func (o *SearchCertificateOrder) SetOrderStatus(v []CertificateOrderStatus) {
	o.OrderStatus = v
}

// GetRevocationReason returns the RevocationReason field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetRevocationReason() []RevocationReason {
	if o == nil || IsNil(o.RevocationReason) {
		var ret []RevocationReason
		return ret
	}
	return o.RevocationReason
}

// GetRevocationReasonOk returns a tuple with the RevocationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetRevocationReasonOk() ([]RevocationReason, bool) {
	if o == nil || IsNil(o.RevocationReason) {
		return nil, false
	}
	return o.RevocationReason, true
}

// HasRevocationReason returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasRevocationReason() bool {
	if o != nil && !IsNil(o.RevocationReason) {
		return true
	}

	return false
}

// SetRevocationReason gets a reference to the given []RevocationReason and assigns it to the RevocationReason field.
func (o *SearchCertificateOrder) SetRevocationReason(v []RevocationReason) {
	o.RevocationReason = v
}

// GetClientReferences returns the ClientReferences field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetClientReferences() []string {
	if o == nil || IsNil(o.ClientReferences) {
		var ret []string
		return ret
	}
	return o.ClientReferences
}

// GetClientReferencesOk returns a tuple with the ClientReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetClientReferencesOk() ([]string, bool) {
	if o == nil || IsNil(o.ClientReferences) {
		return nil, false
	}
	return o.ClientReferences, true
}

// HasClientReferences returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasClientReferences() bool {
	if o != nil && !IsNil(o.ClientReferences) {
		return true
	}

	return false
}

// SetClientReferences gets a reference to the given []string and assigns it to the ClientReferences field.
func (o *SearchCertificateOrder) SetClientReferences(v []string) {
	o.ClientReferences = v
}

// GetStartAfter returns the StartAfter field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetStartAfter() time.Time {
	if o == nil || IsNil(o.StartAfter) {
		var ret time.Time
		return ret
	}
	return *o.StartAfter
}

// GetStartAfterOk returns a tuple with the StartAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetStartAfterOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartAfter) {
		return nil, false
	}
	return o.StartAfter, true
}

// HasStartAfter returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasStartAfter() bool {
	if o != nil && !IsNil(o.StartAfter) {
		return true
	}

	return false
}

// SetStartAfter gets a reference to the given time.Time and assigns it to the StartAfter field.
func (o *SearchCertificateOrder) SetStartAfter(v time.Time) {
	o.StartAfter = &v
}

// GetStartBefore returns the StartBefore field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetStartBefore() time.Time {
	if o == nil || IsNil(o.StartBefore) {
		var ret time.Time
		return ret
	}
	return *o.StartBefore
}

// GetStartBeforeOk returns a tuple with the StartBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetStartBeforeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartBefore) {
		return nil, false
	}
	return o.StartBefore, true
}

// HasStartBefore returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasStartBefore() bool {
	if o != nil && !IsNil(o.StartBefore) {
		return true
	}

	return false
}

// SetStartBefore gets a reference to the given time.Time and assigns it to the StartBefore field.
func (o *SearchCertificateOrder) SetStartBefore(v time.Time) {
	o.StartBefore = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *SearchCertificateOrder) SetAttribute(v string) {
	o.Attribute = &v
}

// GetIncludeCertificateChain returns the IncludeCertificateChain field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetIncludeCertificateChain() bool {
	if o == nil || IsNil(o.IncludeCertificateChain) {
		var ret bool
		return ret
	}
	return *o.IncludeCertificateChain
}

// GetIncludeCertificateChainOk returns a tuple with the IncludeCertificateChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetIncludeCertificateChainOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeCertificateChain) {
		return nil, false
	}
	return o.IncludeCertificateChain, true
}

// HasIncludeCertificateChain returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasIncludeCertificateChain() bool {
	if o != nil && !IsNil(o.IncludeCertificateChain) {
		return true
	}

	return false
}

// SetIncludeCertificateChain gets a reference to the given bool and assigns it to the IncludeCertificateChain field.
func (o *SearchCertificateOrder) SetIncludeCertificateChain(v bool) {
	o.IncludeCertificateChain = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SearchCertificateOrder) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCertificateOrder) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SearchCertificateOrder) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SearchCertificateOrder) SetTags(v []string) {
	o.Tags = v
}

func (o SearchCertificateOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCertificateOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderReference) {
		toSerialize["orderReference"] = o.OrderReference
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.OrderStatus) {
		toSerialize["orderStatus"] = o.OrderStatus
	}
	if !IsNil(o.RevocationReason) {
		toSerialize["revocationReason"] = o.RevocationReason
	}
	if !IsNil(o.ClientReferences) {
		toSerialize["clientReferences"] = o.ClientReferences
	}
	if !IsNil(o.StartAfter) {
		toSerialize["startAfter"] = o.StartAfter
	}
	if !IsNil(o.StartBefore) {
		toSerialize["startBefore"] = o.StartBefore
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.IncludeCertificateChain) {
		toSerialize["includeCertificateChain"] = o.IncludeCertificateChain
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableSearchCertificateOrder struct {
	value *SearchCertificateOrder
	isSet bool
}

func (v NullableSearchCertificateOrder) Get() *SearchCertificateOrder {
	return v.value
}

func (v *NullableSearchCertificateOrder) Set(val *SearchCertificateOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCertificateOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCertificateOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCertificateOrder(val *SearchCertificateOrder) *NullableSearchCertificateOrder {
	return &NullableSearchCertificateOrder{value: val, isSet: true}
}

func (v NullableSearchCertificateOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCertificateOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


