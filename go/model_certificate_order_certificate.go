/*
SwissSign RA REST API

See https://github.com/SwissSign-AG/RaApi/README.md

API version: 2.0.0
Contact: opensource@swisssign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package swisssign_ra_api.v2

import (
	"encoding/json"
	"time"
	"os"
	"fmt"
)

// CertificateOrderCertificate Certificate reference
type CertificateOrderCertificate struct {
	Certificate *Certificate
	NullType *NullType
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CertificateOrderCertificate) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Certificate
	err = json.Unmarshal(data, &dst.Certificate);
	if err == nil {
		jsonCertificate, _ := json.Marshal(dst.Certificate)
		if string(jsonCertificate) == "{}" { // empty struct
			dst.Certificate = nil
		} else {
			return nil // data stored in dst.Certificate, return on the first match
		}
	} else {
		dst.Certificate = nil
	}

	// try to unmarshal JSON data into NullType
	err = json.Unmarshal(data, &dst.NullType);
	if err == nil {
		jsonNullType, _ := json.Marshal(dst.NullType)
		if string(jsonNullType) == "{}" { // empty struct
			dst.NullType = nil
		} else {
			return nil // data stored in dst.NullType, return on the first match
		}
	} else {
		dst.NullType = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(CertificateOrderCertificate)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CertificateOrderCertificate) MarshalJSON() ([]byte, error) {
	if src.Certificate != nil {
		return json.Marshal(&src.Certificate)
	}

	if src.NullType != nil {
		return json.Marshal(&src.NullType)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCertificateOrderCertificate struct {
	value *CertificateOrderCertificate
	isSet bool
}

func (v NullableCertificateOrderCertificate) Get() *CertificateOrderCertificate {
	return v.value
}

func (v *NullableCertificateOrderCertificate) Set(val *CertificateOrderCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateOrderCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateOrderCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateOrderCertificate(val *CertificateOrderCertificate) *NullableCertificateOrderCertificate {
	return &NullableCertificateOrderCertificate{value: val, isSet: true}
}

func (v NullableCertificateOrderCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateOrderCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


